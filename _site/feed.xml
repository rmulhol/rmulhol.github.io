<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rob Writes Code</title>
    <description>Random thoughts and musings.
</description>
    <link>http://rmulhol.github.io/</link>
    <atom:link href="http://rmulhol.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 30 Dec 2022 11:37:35 -0600</pubDate>
    <lastBuildDate>Fri, 30 Dec 2022 11:37:35 -0600</lastBuildDate>
    <generator>Jekyll v3.9.2</generator>
    
      <item>
        <title>Writing Technical Design Documents</title>
        <description>&lt;p&gt;One great mechanism for improving the planning process among distributed teams is writing technical design documents. Design docs spell out what you’re going to build, how you’re going to build it, and why you’re building it the way you are. Because design docs involve clearly communicating your plan in writing, they serve a nice forcing function in verifying that you have a solid plan. As you’re building the system and after it’s built, the design also provides an artifact into the intent and considerations that went into key decisions.&lt;/p&gt;

&lt;p&gt;There are several great resources out there for folks who are getting started writing technical designs. I’d especially recommend Malte Ubl’s &lt;a href=&quot;https://www.industrialempathy.com/posts/design-docs-at-google/&quot;&gt;“Design Docs at Google.”&lt;/a&gt; While I largely agree with much of the content there, I wanted to take some time here to reflect the key recommendations I’d offer to someone who’s getting started writing this type of document.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Err on the side of writing.&lt;/strong&gt; A common question in the literature is what sort of efforts merit a design doc. It’s good to establish clear guidelines, and to assure that you properly scope work before committing resources to execution. That said, it normally doesn’t hurt to write things down. If you’re on the fence about whether or not a given change requires a design doc, consider just going ahead and writing something. Perhaps you’ll discover that the change doesn’t merit it, and you don’t have to share out. You’ll still benefit from surveying the landscape and thinking clearly about the problem. Take opportunities to practice writing things down whenever you have an inkling that greater explanation may be warranted, and you can grow your muscle in designing nontrivial systems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don’t start by writing a design doc.&lt;/strong&gt; A corollary to the above is that lots of efforts that merit writing things down don’t necessarily justify a full fledged technical design, which often includes painstaking detail and peripheral concerns (monitoring/alerting strategies, privacy/security implications, timeline estimates, etc). It can be helpful to “grow” a technical design from a series of smaller documents. Perhaps you can start by capturing your idea in a one-pager. Share that with a few close confidants and see if it has legs. If so, maybe you expand out to several pages and seek feedback from a larger group of reviewers. You can save the effort that would go into writing a comprehensive design doc until it’s clear that the payoff is there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Focus on the “why.”&lt;/strong&gt; A natural instinct when writing design docs is to focus on &lt;em&gt;how&lt;/em&gt; you’re going to build the system. These details are critical, and it makes sense to put great care into defining them - if for no other reason than to prove that the goals you’re setting out to accomplish are actually achievable. That said, answering questions about &lt;em&gt;why&lt;/em&gt; you’re building the system the way you are is as much if not more important, for several reasons:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Logically prior.&lt;/strong&gt; How you build your system may flow directly from a critical decision that narrows your options. For example, your data model will be impacted by whether you choose a SQL vs NoSQL data store. If your data model is premised on an underlying data store that you haven’t justified in the first place, then your design is incomplete. The “why” comes before the “how.”&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lasting impact.&lt;/strong&gt; Low level details of your design will change over time, as you encounter unexpected blockers, new or changing requirements, and so forth. Less likely to change are the major decisions. Indeed, these decisions will constrain how you can adapt in a dynamic environment. Focusing on why you made those decisions pays dividends deep into the future, since it surfaces the tradeoffs and intent behind your constraints.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Digestible.&lt;/strong&gt; The details about how you’ll build a complex system are bound to be lengthy, so that they can stand up to close scrutiny. But the reality is that some of your most valuable feedback will come from folks whose time is at a premium. These folks may not have the bandwidth to deep dive on all of the implementation details, but are well suited to assess your key decisions and tradeoffs. Spotlighting the “why” gets maximum value from all reviewers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Let it go.&lt;/strong&gt; Ideally, you should write a design and then execute it. In reality, you’ll likely find that the implementation starts to drift from the design over time. In some cases, it may make sense to go back and update the design. But, it can also be perfectly reasonable to let the doc grow old and outdated. Design docs are a guide to early execution and a historical record of intent; they are not the systems they describe. It’s ok if code or other documentation starts to fill a greater role in explaining the system, and you should focus your time/effort in the place where it delivers the most value to the business.&lt;/p&gt;

&lt;p&gt;Take all of the above with a grain of salt, and probe for the expectations around technical designs in your specific organizational context. At the end of the day, the measure of a design’s worth is its value to the team - and you need to understand what your team values to build a valuable technical design.&lt;/p&gt;

&lt;p&gt;Design docs are a tool like any other; they may not always be suited to the task at hand. But when they are, they can play a huge role in unlocking and facilitating efficient execution at scale. Writing is a critical means of communication in any field, and software is no exception. By practicing, iterating, and refining our writing, we can produce higher quality software.&lt;/p&gt;
</description>
        <pubDate>Fri, 30 Dec 2022 00:00:00 -0600</pubDate>
        <link>http://rmulhol.github.io/general/2022/12/30/technical-design-docs.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io/general/2022/12/30/technical-design-docs.html</guid>
        
        <category>craftsmanship</category>
        
        <category>communication</category>
        
        
        <category>General</category>
        
      </item>
    
      <item>
        <title>Querying Ethereum Storage: Understanding Positions and Packing</title>
        <description>&lt;p&gt;One advantage of Ethereum’s decentralized applications is their transparency: you don’t have to trust anyone because you can verify everything for yourself.
Unfortunately, it’s not often clear &lt;em&gt;how&lt;/em&gt; to perform that verification.&lt;/p&gt;

&lt;p&gt;Ethereum nodes assist in this effort by verifying the validity of state transitions, but a “valid” state transition might still yield unexpected results.
In order to verify that the state of the network matches your expectations, you need to be able to perform queries that access that state.&lt;/p&gt;

&lt;p&gt;How do you do that?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Querying Storage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The obvious query for accessing contract state is &lt;a href=&quot;https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getstorageat&quot;&gt;eth_getStorageAt&lt;/a&gt;.
This enables you to lookup the value assigned to any variable on a deployed contract at any block.&lt;/p&gt;

&lt;p&gt;Any time you use this query, the first and third arguments are obvious: the contract address and the block number.
You want to access the value of a variable on a given contract at a given block, so plug in that contract’s address and the desired block number (or “latest” for the most recent value).&lt;/p&gt;

&lt;p&gt;The tricky part comes in constructing the second argument: the storage key.
&lt;a href=&quot;https://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage&quot;&gt;The Solidity docs&lt;/a&gt; cover how to build this key for Solidity contracts, but the devil is in the details.&lt;/p&gt;

&lt;p&gt;The first topic to understand in building storage keys for Solidity contracts is variable positioning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Variable Positions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For contract variables that are neither a mapping nor a dynamic array, the storage key is the zero-indexed position of the variable on the contract.
This means that the first variable usually has a storage key of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, the second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, the third &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;, and so forth.&lt;/p&gt;

&lt;p&gt;The main quirk that can get in the way here is packing.
Variables that do not occupy an entire storage slot (32 bytes) will be packed together if they are ordered contiguously (and both fit in a single slot).&lt;/p&gt;

&lt;p&gt;Let’s take a look at an example contract:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;pragma solidity 0.5.12;

contract PackingExample {
    uint256 callCount;
    uint128 numberOne;
    uint128 numberTwo;

    function setNumberOne(uint128 n) public {
        callCount++;
        numberOne = n;
    }

    function setNumberTwo(uint128 n) public {
        callCount++;
        numberTwo = n;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are three variables on this contract, but only two storage slot positions.
Since a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uint128&lt;/code&gt; only occupies 16 bytes and we have two of them arranged contiguously following a completely occupied slot, they are packed into the same position: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Suppose that we execute two transactions against this contract:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setNumberOne(1)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setNumberTwo(2)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In that case, we would expect a call to get the latest storage at position &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; on this contract to return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0000000000000000000000000000000200000000000000000000000000000001&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since items in a storage slot are lower-order aligned, the 16 bytes to the right represent the value for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numberOne&lt;/code&gt; and the 16 bytes to the left represent &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numberTwo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s take a look at one more example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;pragma solidity 0.5.12;

contract PackingExampleTwo {
    uint64 callCount;
    uint128 numberOne;
    uint128 numberTwo;
    uint64 numberThree;
    uint64 numberFour;

    function setNumberOne(uint128 n) public {
        callCount++;
        numberOne = n;
    }

    function setNumberTwo(uint128 n) public {
        callCount++;
        numberTwo = n;
    }

    function setNumberThree(uint64 n) public {
        callCount++;
        numberThree = n;
    }

    function setNumberFour(uint64 n) public {
        callCount++;
        numberFour = n;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Can you guess how many storage slots this contract uses?
Which variables will go into which position?&lt;/p&gt;

&lt;p&gt;This contract also requires only two storage slot positions, but the contiguously arranged &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uint128&lt;/code&gt; variables do not occupy the same slot.
Instead, position &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; contains &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;callCount&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numberOne&lt;/code&gt;, and position &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; contains &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numberTwo&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numberThree&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numberFour&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uint64&lt;/code&gt; only requires 8 bytes, which means space remains for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numberOne&lt;/code&gt; to be packed into the same slot as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;callCount&lt;/code&gt;.
At that point, the slot at position &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; has utilized 24 of the 32 available bytes, and cannot accommodate the 16 bytes required for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numberTwo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Instead, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numberTwo&lt;/code&gt; occupies 16 bytes in the next position, which also has space to accommodate the two following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uint64&lt;/code&gt; values.&lt;/p&gt;

&lt;p&gt;Suppose we execute four transactions against this contract:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setNumberOne(1)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setNumberTwo(2)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setNumberThree(3)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setNumberFour(4)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In that case, we would expect a call to get the latest storage at position &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; to return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0000000000000000000000000000000000000000000000010000000000000004&lt;/code&gt;, indicating that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;callCount&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numberOne&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;.
Note that the first 8 bytes in this storage slot are not used - the first 8 bytes can be discarded when parsing this payload.&lt;/p&gt;

&lt;p&gt;Similarly, the latest storage at position &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0000000000000004000000000000000300000000000000000000000000000002&lt;/code&gt;, indicating that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numberTwo&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numberThree&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numberFour&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Further Considerations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Being able to correctly identify the positions of variables on a contract is the first step to correctly building storage keys for desired state.
Hopefully, this post has provided some insight into how to correctly identify the positions of variables given storage packing.&lt;/p&gt;

&lt;p&gt;Additional knowledge is required to identify the values for more complex types - entries in mappings and dynamic arrays, structs, etc.
Look forward to future posts on those topics!&lt;/p&gt;
</description>
        <pubDate>Fri, 08 Nov 2019 00:00:00 -0600</pubDate>
        <link>http://rmulhol.github.io/blockchain/2019/11/08/storage-positions-and-packing.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io/blockchain/2019/11/08/storage-positions-and-packing.html</guid>
        
        <category>ethereum</category>
        
        <category>rpc</category>
        
        
        <category>blockchain</category>
        
      </item>
    
      <item>
        <title>Caching Ethereum Data: Events vs Storage</title>
        <description>&lt;p&gt;One core challenge in the Ethereum ecosystem is accessing historical data.
Want to know what your token balance was last week?
Hopefully you’ve allocated &lt;a href=&quot;https://etherscan.io/chartsync/chainarchive&quot;&gt;over 3TB of disk&lt;/a&gt; to running an archive node, or else that data’s likely been pruned.&lt;/p&gt;

&lt;p&gt;Historical state pruning is no accident.
A full node’s goal is to validate the current state of the network, which only requires applying transactions to the most recent state.
If your objective is to enable performant queries against previous states, it makes sense to use a tool that’s specifically devoted to that task.&lt;/p&gt;

&lt;p&gt;But how would one build such a tool?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Events&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A common technique for caching historical data is track &lt;a href=&quot;https://solidity.readthedocs.io/en/latest/contracts.html#events&quot;&gt;events&lt;/a&gt;.
During execution, contracts can emit events that provide a window into the contract’s internal state at that point in time.
Full nodes currently retain all events indefinitely, and the &lt;a href=&quot;https://github.com/ethereum/wiki/wiki/JSON-RPC&quot;&gt;JSON RPC API&lt;/a&gt; enables subscribing to desired events in real time - so building a cache derived from events minimizes resource usage.&lt;/p&gt;

&lt;p&gt;Unfortunately, this approach has several drawbacks.&lt;/p&gt;

&lt;p&gt;For one, you’re depending on contract authors to include all the data you desire in the events they emit.
If they decide that some data points are not worthy of events (and the gas costs they incur), then you’re out of luck - your cache will have to exclude that data.&lt;/p&gt;

&lt;p&gt;Additionally, there’s no guarantee that the data in an event is accurate.
If you haven’t inspected the contract’s source code to verify that an event’s payload is correctly derived from the expected storage slot(s), it could be coming from anywhere.&lt;/p&gt;

&lt;p&gt;In many cases, an event doesn’t even capture a contract’s state per se, but rather the delta between old and new values.
In that case, your cache depends on capturing &lt;em&gt;every&lt;/em&gt; relevant event (with handling for events pruned by reorgs) and then correctly applying arithmetic to derive the product of the deltas.&lt;/p&gt;

&lt;p&gt;Oh yeah, and node developers have &lt;a href=&quot;https://gist.github.com/karalabe/60be7bef184c8ec286fc7ee2b35b0b5b&quot;&gt;signaled&lt;/a&gt; that retaining all historical events may not remain viable - events may eventually be pruned along with previous states.&lt;/p&gt;

&lt;p&gt;This is clearly not a very good situation.
Events can alert you to the fact that something happened, but they should not be considered a reliable proxy for reconstructing historical state.&lt;/p&gt;

&lt;p&gt;So where does that leave us?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Storage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The place to go for accessing historical contract storage values is, wait for it… storage!
The aforementioned JSON RPC API includes a &lt;a href=&quot;https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getstorageat&quot;&gt;function for accessing storage slots directly&lt;/a&gt;.
If you query for data at a given storage slot, then you know that you’re getting an accurate representation of the data you desire.
You can even &lt;a href=&quot;https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getproof&quot;&gt;get proof&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are a couple of hurdles.
Accessing storage at previous blocks means running an archive node, and building up keys for storage slots in mappings and dynamic arrays is no picnic.&lt;/p&gt;

&lt;p&gt;But, on the whole, if you want to build a reliable cache - this is currently the cost of doing business.
Looking forward to covering how you can minimize those costs and get your queries right in upcoming posts!&lt;/p&gt;
</description>
        <pubDate>Wed, 06 Nov 2019 00:00:00 -0600</pubDate>
        <link>http://rmulhol.github.io/blockchain/2019/11/06/ethereum-caching-events-vs-storage.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io/blockchain/2019/11/06/ethereum-caching-events-vs-storage.html</guid>
        
        <category>ethereum</category>
        
        <category>rpc</category>
        
        
        <category>blockchain</category>
        
      </item>
    
      <item>
        <title>Working With SQL: Deriving New Data From Existing Columns</title>
        <description>&lt;p&gt;If you spend your time working on web applications, it’s almost inevitable that you will at some point find yourself working with a relational database. And even if that database is ultimately &lt;a href=&quot;https://blog.8thlight.com/uncle-bob/2012/05/15/NODB.html&quot;&gt;a peripheral detail of your application&lt;/a&gt;, it’s one with which you’ll want to have a fairly intimate familiarity.&lt;/p&gt;

&lt;p&gt;What do I mean by intimate familiarity? An ability to interact with that database comfortably, without the aid of an ORM. Putting aside questions as to whether &lt;a href=&quot;http://seldo.com/weblog/2011/08/11/orm_is_an_antipattern&quot;&gt;ORM is an anti-pattern&lt;/a&gt; (or &lt;a href=&quot;http://blogs.tedneward.com/2006/06/26/The+Vietnam+Of+Computer+Science.aspx&quot;&gt;the Vietnam of computer science&lt;/a&gt;), there will almost certainly be situations in which understanding the underlying syntax of the database will make your life easier.&lt;/p&gt;

&lt;p&gt;In this post, we’ll get started with nurturing that sort of familiarity by discussing how to accomplish a simple task in PostgreSQL: deriving new data from the combination and/or evaluation of fields in a database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Combination: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UNION&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Accessing data from a table’s columns is fairly straightforward:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- one column from a table&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one_column&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- multiple columns from a table&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one_column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another_column&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- all columns from a table&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These queries allow us access data that’s either identical to or a subset of existing columns. But what if we want our query’s results to &lt;em&gt;combine&lt;/em&gt; data from several columns?&lt;/p&gt;

&lt;p&gt;For example, imagine that you have a table &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;people&lt;/code&gt; that stores the name, favorite actor, and favorite actress of several individuals.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;id&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;name&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;favorite_actor&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;favorite_actress&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Bob&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Brad Pitt&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Angelina Jolie&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Jane&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Bradley Cooper&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Jennifer Lawrence&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Sally&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Leonardo DiCaprio&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Kate Winslet&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now imagine that we want to extract the favorite actors and actresses into a new column representing all movie stars, without respect for gender.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;movie_star&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Brad Pitt&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Angeline Jolie&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Bradley Cooper&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Jennifer Lawrence&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Leonardo DiCaprio&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Kate Winslet&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The simple queries listed at the top of this section won’t work, since they return columns as they are represented in our database.&lt;/p&gt;

&lt;p&gt;To query for a combination of data from several columns, we can take advantage of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UNION&lt;/code&gt; operation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;favorite_actor&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;movie_star&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;UNION&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;favorite_actress&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UNION&lt;/code&gt; operation lets us combine the results of several queries, allowing us to aggregate data both within and across tables.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Derivation: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CASE&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the case of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UNION&lt;/code&gt; operation, our query returns results with a new column header, but merely a combination of contents - they all correspond to existing fields in our database.&lt;/p&gt;

&lt;p&gt;If we want to query for results that yield both a new header and new contents, we can take advantage of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CASE&lt;/code&gt; operation.&lt;/p&gt;

&lt;p&gt;For example, still working with our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;people&lt;/code&gt; table, say  we want to derive a column that tells us whether the person in question loves &lt;em&gt;Titanic&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We can’t really be sure that any of them don’t love &lt;em&gt;Titanic&lt;/em&gt;, but we feel comfortable predicting that they do love the film if their favorite actor is Leonardo DiCaprio and their favorite actress is Kate Winslet.&lt;/p&gt;

&lt;p&gt;Using that criteria, we can put together our query like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;CASE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;favorite_actor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Leonardo DiCaprio&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;favorite_actress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Kate Winslet&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Yes&apos;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Unsure&apos;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loves_titanic&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since Sally was the only person in our table that matched the criteria, she will be the only person designated with a ‘Yes’ in our new column.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;name&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;loves_titanic&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Bob&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Unsure&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Jane&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Unsure&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Sally&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Here, our query returns results without a 1-to-1 mapping to our database. By including a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CASE&lt;/code&gt; operation that behaves differently depending on the contents of existing fields in our database, we’re able to derive new information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We haven’t come close to exhausting the range of techniques you can use to derive new and sophisticated information from tables in a database, much less other information that you’ll want to possess to accomplish other tasks, but we have covered some important ground.&lt;/p&gt;

&lt;p&gt;If you’re in an environment where you’re likely to find yourself working with a relational database, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UNION&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CASE&lt;/code&gt; operations are two techniques with which you’ll want to be familiar.&lt;/p&gt;

</description>
        <pubDate>Fri, 16 Oct 2015 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io/sql/2015/10/16/sql-union-case.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io/sql/2015/10/16/sql-union-case.html</guid>
        
        <category>union</category>
        
        <category>case</category>
        
        
        <category>sql</category>
        
      </item>
    
      <item>
        <title>Undoing An Erroneous Force Push: The Git Reflog</title>
        <description>&lt;p&gt;Recently, I’ve been working on a project maintained by multiple developers. There are a decent number of pull requests hanging around, and a lot of work happening at all times. One of my roles has been to prepare open pull requests for a clean and easy merge.&lt;/p&gt;

&lt;p&gt;Not too tricky of a task, most of the time. Rebase the branch onto master, resolve all the conflicts, push up the changes, and it’s good to go.&lt;/p&gt;

&lt;p&gt;Unless you mess up the rebase, incorrectly resolving merge conflicts. Running the tests will save you most of the time, but not always. And if you get too far, you may have just force pushed a broken branch onto the PR. Oops.&lt;/p&gt;

&lt;p&gt;Luckily, this sort of error is not the end of the world. Not at all.&lt;/p&gt;

&lt;p&gt;There are number of ways to deal with inadvertent force pushes; I’d recommend &lt;a href=&quot;https://blog.8thlight.com/sandro-padin/2015/06/08/help-i-just-force-pushed-to-master.html&quot;&gt;this blog post&lt;/a&gt; if you haven’t come across it already. But in this case, a very simple solution is to take advantage of &lt;a href=&quot;https://git-scm.com/docs/git-reflog&quot;&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reflog&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you’re in your project’s directory and you type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reflog&lt;/code&gt; on the command line, you’ll see a history of actions you’ve taken within the project: moving between branches, making commits, etc.&lt;/p&gt;

&lt;p&gt;If you pinpoint the &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection&quot;&gt;SHA&lt;/a&gt; corresponding to the place where everything went awry (e.g. the place right before where you began the faulty rebase), you can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout&lt;/code&gt; that SHA and begin again. Or just breathe a sigh of relief as you push it up un-catastrophically-rebased.&lt;/p&gt;

</description>
        <pubDate>Wed, 07 Oct 2015 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io/general/2015/10/07/git-reflog.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io/general/2015/10/07/git-reflog.html</guid>
        
        <category>git</category>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Backbone + React: Render Components With `Render`</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;tl;dr - Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React.render()&lt;/code&gt; in place of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React.renderComponent()&lt;/code&gt; when rendering React components from Backbone views&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you’re looking to start bringing React into a project you’ve set up in Backbone, you’re in luck. It can be done. There are even some nice posts out there to help get you started.&lt;/p&gt;

&lt;p&gt;Say you want to start bringing React components into your Backbone views. Thomas Boyt &lt;a href=&quot;https://venmo-blog.squarespace.com/2015/6/4/using-react-components-as-backbone-views&quot;&gt;has you covered&lt;/a&gt;. Looking to get more parts of each library talking to each other? Check out &lt;a href=&quot;https://blog.engineyard.com/2015/integrating-react-with-backbone&quot;&gt;Ben Lewis’ post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The wealth of information is a gift, and a testament to the software community’s willingness to share information to help make solving common problems a little bit easier.&lt;/p&gt;

&lt;p&gt;Unfortunately, it can be tough for the literature to keep up with changing APIs. Techniques that got the job done only a year ago (or less) might no longer be supported today.&lt;/p&gt;

&lt;p&gt;This isn’t a huge problem; it’s better to have slightly dated information than to have nothing at all.&lt;/p&gt;

&lt;p&gt;But if you’re new to both libraries, trying to make React and Backbone play nicely with each other can be challenging enough. Adding on the obstacle of non-working sample code can make the solution seem out of reach.&lt;/p&gt;

&lt;p&gt;So, in this post, I want to highlight one place where the API has changed, and what you can do to keep making progress.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Goodbye &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;renderComponent()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Both of the posts linked to above render React components from Backbone views with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React.renderComponent()&lt;/code&gt;. This function takes two arguments: the component to render and the DOM element that it should occupy.&lt;/p&gt;

&lt;p&gt;The trouble is, that function &lt;a href=&quot;https://facebook.github.io/react/blog/2014/10/28/react-v0.12.html&quot;&gt;is now deprecated&lt;/a&gt;. If you give it a try with a recent version of React, you’ll be met with an unwelcome surprise in the console: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Uncaught TypeError: React.renderComponent is not a function&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you read through the documentation, you’ll see that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React.renderComponent()&lt;/code&gt; has been replaced by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React.render()&lt;/code&gt;. And that’s the replacement you should use (see the “tl;dr”), but there are reasons you might be tempted to not do so.&lt;/p&gt;

&lt;p&gt;Just like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React.renderComponent()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React.render()&lt;/code&gt; requires that you pass in a DOM element identifying where on the page your component should be rendered. When the component is rendered to that DOM element, it replaces the existing contents of that container.&lt;/p&gt;

&lt;p&gt;This means that rendering your React component can delete existing page contents. When you’re displaying something like a modal, that can be a real pain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So Many Renders&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Taking a look through the documentation, you can see that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React.render()&lt;/code&gt; is supplemented by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React.renderToString()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React.renderToStaticMarkup()&lt;/code&gt;. These functions have the advantage of only taking one argument: the component you want to render.&lt;/p&gt;

&lt;p&gt;The benefit of not taking control of a DOM element is that you don’t have to cede control of that container over to React. Simply generate the contents you want to display, then add or remove them at will with jQuery; it creates no problems for your existing content.&lt;/p&gt;

&lt;p&gt;However, such static markup does not have access to functions that you’ve defined on your components. When it comes time to handle events, you can lose a lot of the benefits that React provides, as you start micromanaging every event from your top-level Backbone view.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Render Under Control&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order to access functions defined on your React components, you’ll want to stick with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React.render()&lt;/code&gt;, handing over control of the DOM element. That’s the most simple way to get your content on the page while also taking advantage of React’s event handling.&lt;/p&gt;

&lt;p&gt;If you’re worried about losing existing content, a simple solution is to append a new DOM element where you want the component to render, passing that in as the container.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parentEl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;div class=&apos;component-container&apos;&amp;gt;&amp;lt;/div&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;prop1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;prop2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;.component-container&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Make sure that you unmount the component when it’s closed:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unmountComponentAtNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;.component-container&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And you’ve successfully taken advantage of React’s event handling inside of your Backbone view.&lt;/p&gt;

</description>
        <pubDate>Mon, 14 Sep 2015 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io/javascript/2015/09/14/backbone-react-render.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io/javascript/2015/09/14/backbone-react-render.html</guid>
        
        <category>react</category>
        
        <category>backbone</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Program Like a Debater: Character, Commitment, Team Work, Hard Work</title>
        <description>&lt;p&gt;During my time as a debater, I had the privilege of working under the greatest coach in the history of college debate: &lt;a href=&quot;http://articles.chicagotribune.com/2009-12-29/news/0912280347_1_mr-deatherage-debate-community-students&quot;&gt;Larry Scott Deatherage&lt;/a&gt;. Most of us who knew him referred to him affectionately as ‘the Duck.’&lt;/p&gt;

&lt;p&gt;Duck coached 7 national champions in 12 years. Across his tenure, he personally led Northwestern to more national championships than any other &lt;em&gt;program&lt;/em&gt; in the history of college debate - Harvard, Dartmouth, Berkeley, you name it.&lt;/p&gt;

&lt;p&gt;He instilled in me the mantra from the title: character, commitment, team work, and hard work. It was a set of principles he referred to often; a collection of foundational building blocks upon which success in debate is built.&lt;/p&gt;

&lt;p&gt;As I’ve been growing as a software developer, I’ve been keeping an eye open toward figuring out what sorts of principles underlie success in this discipline. I’ve pursued the topic in conversations with colleagues, and checked for clues in the books that I read.&lt;/p&gt;

&lt;p&gt;As I was reading &lt;a href=&quot;http://www.amazon.com/Peopleware-Productive-Projects-Second-Edition/dp/0932633439&quot;&gt;&lt;em&gt;Peopleware&lt;/em&gt;&lt;/a&gt;, I came across a really interesting passage:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The best organizations are not of a kind; they are more notable for their dissimilarities than for their likenesses. But one thing that they all share is a preoccupation with being the best. It is a constant topic in the corridors, in working meetings, and in bull sessions. The converse of this effect is equally true: In organizations that are not “the best,” the topic is rarely or never discussed.&lt;/p&gt;

  &lt;p&gt;The best organizations are consciously striving to be best. This is a common goal that provides common direction, joint satisfaction, and a strong binding effect. There is a mentality of permanence about such places, the sense that you’d be dumb to look for a job elsewhere — people would look at you as though you were daft. (122)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And then it hit me. Character, commitment, team work, and hard work aren’t just building blocks for success in debate. They’re building blocks for success in &lt;em&gt;anything&lt;/em&gt;. Duck was so big on preaching these lessons because they’re not just about debate; they’re about life.&lt;/p&gt;

&lt;p&gt;I always knew this on some gut level. Of course success in any discipline is going to require that you show character, commit to your goals, work effectively with those around you, and give it your all. But the thing that brings it all together is the motivation that &lt;em&gt;Peopleware&lt;/em&gt; finds in successful software teams: being preoccupied with being the best.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be The Best&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After I finished debating, I went on to coach myself. I’m no Duck, not even close, but I did have the privilege of working with national champions at both the high school and college levels.&lt;/p&gt;

&lt;p&gt;When I look back on those teams, and think about how they reached that pinnacle, I see the exact same principles that the Duck talked about. I think back to how it felt to work with those folks, and one thing is obvious: they were preoccupied with being the best.&lt;/p&gt;

&lt;p&gt;Being preoccupied with being the best manifests itself in all sorts of little ways. You show up a little bit earlier than you need to, leave a little bit late. You poke around beyond the materials you know that you need to master, just to have an edge when it’s time for something new. It’s not reducible to just one thing.&lt;/p&gt;

&lt;p&gt;But you can definitely tell the difference between the teams that are preoccupied with being the best and those that aren’t. It’s transparent in the way they carry themselves. Some do just enough to get by, and others do noticeably more.&lt;/p&gt;

&lt;p&gt;It’s ok to not be preoccupied with being the best. Sometimes you’re just doing something as a hobby, and sometimes you have other priorities. That’s perfectly understandable.&lt;/p&gt;

&lt;p&gt;But when you decide to devote a chunk of every day to one activity, it makes sense to take that extra step - to make it your goal to be the best that you can be.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Continual Improvement&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To say that Duck was preoccupied with being the best certainly isn’t false, but it also risks a miscommunication - as if to say that he had no mental bandwidth to deal with those for whom singular dominance of the field seemed out of reach.&lt;/p&gt;

&lt;p&gt;But that’s certainly not true. I showed up in Duck’s office as a freshman having tallied one win and six losses at the national championship in high school. I wasn’t exactly a star recruit. And my freshman class certainly wasn’t lacking for those who were.&lt;/p&gt;

&lt;p&gt;But Duck gave me an opportunity anyway, giving me challenging assignments just like anyone else and sending me to major tournaments. In doing so, he delivered another of his famous mantras. “Your goal,” he said, “is simply this: to be debating better at the end of the year than you were at the beginning of the year.”&lt;/p&gt;

&lt;p&gt;He also said this: “When one of us wins, we all win. When one of us loses, we all lose.” A team that’s preoccupied with being the best isn’t closed off to those who have room to grow. On the contrary, it puts folks of various skill sets in collaboration with one another, fostering shared learning and growth.&lt;/p&gt;

&lt;p&gt;Suffice it to say that I was &lt;em&gt;far&lt;/em&gt; more successful in college than I had been in high school. Setting your sights on continual improvement and buying into the shared excellence of a team makes you part of a whole that’s greater than the sum of its parts, and it enables you to flourish in ways that might not have seemed possible before.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Software Craftsmanship&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As I’ve been growing out of debate and into software development, one thing that’s been heartening for me is the discovery that these principles and mantras aren’t just &lt;em&gt;relevant to&lt;/em&gt; my new field - they’re actively practiced and endorsed, at least by some folks.&lt;/p&gt;

&lt;p&gt;In the contexts I’ve explored, they go by the name of software craftsmanship.&lt;/p&gt;

&lt;p&gt;Software craftsmanship embodies a commitment to doing a little bit more than you would need to do just to get by. It invests in the belief that doing so isn’t just some sort of icing on the cake, but rather the crucial ingredient.&lt;/p&gt;

&lt;p&gt;Not everyone who does software development is committed to the principles of software craftsmanship. Some are more interested in shipping code as fast and effortlessly as possible. That’s fine.&lt;/p&gt;

&lt;p&gt;But it’s not the sort of attitude that engenders excellence. As Aristotle put it, “We are what we repeatedly do. Excellence, then, is not an act, but a habit.”&lt;/p&gt;

&lt;p&gt;Whether in debate, software, or some other field entirely, character, commitment, team work, and hard work are the habits of excellence. They’re what make a great programmer, a robust programming environment, and a strong team.&lt;/p&gt;

</description>
        <pubDate>Tue, 25 Aug 2015 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io/general/2015/08/25/character-commitment-team-work-hard-work.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io/general/2015/08/25/character-commitment-team-work-hard-work.html</guid>
        
        <category>craftsmanship</category>
        
        <category>books</category>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Appreciating Open Data: Check Out Chicago Beaches</title>
        <description>&lt;p&gt;This past Tuesday, I attended my first &lt;a href=&quot;http://chihacknight.org/&quot;&gt;Chi Hack Night&lt;/a&gt;. It was a really cool experience. The event brings together folks from a broad variety of different backgrounds (not just developers) to work toward making a social impact.&lt;/p&gt;

&lt;p&gt;Many things about the group are impressive: the kind of work they do and have done, the talent and motivation of the participants, and their welcoming attitude toward newcomers. The folks who organize and contribute to Chi Hack Night are absolutely awesome.&lt;/p&gt;

&lt;p&gt;But, beyond the group itself, the tools they use to are impressive as well. In trying to help people visualize and grapple with what’s going on in their community, the folks at Chi Hack Night are aided by access to &lt;a href=&quot;https://data.cityofchicago.org/&quot;&gt;a tremendous amount of data&lt;/a&gt; provided by the city of Chicago.&lt;/p&gt;

&lt;p&gt;I hope to go back to Chi Hack Night, and to contribute to some their projects. But, for now, I was also interested in exploring what all of this data looks like, and what I can do with it.&lt;/p&gt;

&lt;p&gt;So, I started poking around, and I came across &lt;a href=&quot;https://data.cityofchicago.org/Parks-Recreation/Beach-Water-Quality-Automated-Sensors/qmqz-2xku&quot;&gt;a set of data&lt;/a&gt; that provides hourly readings from sensors along Lake Michigan that measure the water quality at those locations.&lt;/p&gt;

&lt;p&gt;I decided to make &lt;a href=&quot;http://rmulhol.github.io/chicago-beaches/&quot;&gt;a little site&lt;/a&gt;, where you can go to check out the latest readings - decide whether or not today would be a good day to hit up the beach in Chicago, or if it’d be best to stay out of the water.&lt;/p&gt;

&lt;p&gt;The site isn’t groundbreaking, but it’s got a couple cool features:&lt;/p&gt;

&lt;p&gt;1) Static - the Chicago Beaches page is a static site. All API requests are made through the browser (thanks, Chicago, for supporting cross-origin resource sharing). This probably makes it pretty uninteresting if you’re browsing without JavaScript enabled and/or on an old browser, but it also means I get …&lt;/p&gt;

&lt;p&gt;2) Hosting - via GitHub pages. Just pushed up my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch, and the site was live within minutes. It’s amazing how easy it is to deploy a little React app with these kinds of tools.&lt;/p&gt;

&lt;p&gt;There’s a few more things I could imagine doing to improve this site, but I’m even more excited at the possibilities that lie ahead working with the tools I’ve used.&lt;/p&gt;

&lt;p&gt;With a budding comfortability with React, huge amounts of data just waiting to be used, and simple static site hosting via GitHub pages, there’s a lot of cool things that lie within reach.&lt;/p&gt;

</description>
        <pubDate>Thu, 20 Aug 2015 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io/general/2015/08/20/chicago-beaches-data.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io/general/2015/08/20/chicago-beaches-data.html</guid>
        
        <category>react</category>
        
        <category>github</category>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Working With APIs: Rolling a Proxy Server</title>
        <description>&lt;p&gt;In &lt;a href=&quot;/javascript/2015/08/11/cross-origin-resource-sharing.html&quot;&gt;yesterday’s post&lt;/a&gt;, we talked about the difficulties one can encounter when making AJAX requests to an API that doesn’t support cross-origin resource sharing (CORS). Unless the response includes the required &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access-Control-Allow-Origin&lt;/code&gt; header, you’ll be getting an error message in the console - and not much else.&lt;/p&gt;

&lt;p&gt;One way to get around this is to write your own proxy server. Instead of waiting for your API’s maintainers to implement support for CORS, simply fetch the content with your own proxy and pass it along with the required header tacked on.&lt;/p&gt;

&lt;p&gt;If you were going to do this in production, you’d have a number of concerns outside of that core functionality - hosting, authentication, etc. But in development, you can cut away a lot of that overhead. Implementing a proxy server in Node is quick and easy.&lt;/p&gt;

&lt;p&gt;Say we’re putting together a little app to display and generate memes. One good option for doing so is &lt;a href=&quot;https://api.imgflip.com/&quot;&gt;Imgflip&lt;/a&gt;. They support fetching popular memes and adding captions on demand. Good stuff.&lt;/p&gt;

&lt;p&gt;They also don’t support CORS. Try to hit the API with AJAX, and you’ll see the familiar error message.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;XMLHttpRequest cannot load https://api.imgflip.com/get_memes. No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘http://localhost:8080’ is therefore not allowed access.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you wanted to hit it by proxy, say at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:3000/get_memes&lt;/code&gt;, you could do so with this script:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;proxyImgflip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proxyImgflip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Serving up &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proxyRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;api.imgflip.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proxyResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;proxyRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;proxyResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Listening on 3000&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Assuming you’ve got Node installed, you can run this script with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node &amp;lt;filename.js&amp;gt;&lt;/code&gt;, and you’re good to go. To access &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://api.imgflip.com/get_memes&lt;/code&gt; in a cross-domain request, you could just hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:3000/get_memes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;How does it work?&lt;/p&gt;

&lt;p&gt;We use Node’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;/code&gt; API to create a server, passing in a callback and setting it to listen on port 3000.&lt;/p&gt;

&lt;p&gt;Within the callback, we log the request, affix the required header to our response, and pass along the incoming request to Imgflip’s API, piping the data we get back into our response.&lt;/p&gt;

&lt;p&gt;It’s only a development-caliber solution, but it delivers major payoff given how little effort is involved. If you’re looking to develop a client-side application to work with an API that doesn’t support CORS, you can get most of the way there with a simple Node script.&lt;/p&gt;

</description>
        <pubDate>Wed, 12 Aug 2015 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io/javascript/2015/08/12/api-proxy-server.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io/javascript/2015/08/12/api-proxy-server.html</guid>
        
        <category>node</category>
        
        <category>cors</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Working With APIs: On Cross-Origin Resource Sharing</title>
        <description>&lt;p&gt;If you’re working with an API, one thing that you might want to do is use &lt;a href=&quot;https://en.wikipedia.org/wiki/Ajax_(programming)&quot;&gt;AJAX&lt;/a&gt; to make requests from the browser. Unfortunately, unless the API provides the required response headers, you might run into some hiccups along the way.&lt;/p&gt;

&lt;p&gt;If you fire a request from the browser at an API that doesn’t support &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&quot;&gt;Cross-Origin Resource Sharing (CORS)&lt;/a&gt;, you’ll get something resembling the following error message in the console:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;XMLHttpRequest cannot load https://api.you.want.to.hit.com/get_data. No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘http://localhost:8080’ is therefore not allowed access.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, what’s going on here? And how do we solve the problem?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is CORS?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The reason you’re seeing this error message is that you’re trying to launch a cross-domain request from the browser. That is, you’re asking the browser to make a request to a URL with a different protocol, host, and/or port number from that of the originating request. This violates &lt;a href=&quot;https://en.wikipedia.org/wiki/Same-origin_policy&quot;&gt;the same-origin policy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Basically, the browser will rubber stamp requests if the source and the target share the same origin. But if you’re interacting with an API, that’s likely not the case.&lt;/p&gt;

&lt;p&gt;That doesn’t mean that cross-domain requests are off limits. But to carry them out, you need to satisfy a few conditions.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/cors/&quot;&gt;this page&lt;/a&gt; for a much more thorough exploration of CORS and its implications for both the client and the server, but for now the most important thing to know is this: in order for a cross-origin request to succeed, the server needs to include an ‘Access-Control-Allow-Origin’ header, and that header needs to authorize the requesting URL (either specifically or via a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;*&apos;&lt;/code&gt; value).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cool, but I don’t control the API’s response headers…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Right. You’re probably not in a position to assure that your API supports the required response headers.&lt;/p&gt;

&lt;p&gt;At this point, you have a few options.&lt;/p&gt;

&lt;p&gt;The first is to get in touch with people who host the API and request that they support cross-origin requests. It may be ignored or take awhile, but it’s a path of least resistance that they have little reason to turn down beyond not having the time (an admittedly fair obstacle).&lt;/p&gt;

&lt;p&gt;The second is to roll your own proxy server. Even if you can’t get the API host to support cross-origin requests, you can make your own server that does - and then use it to hit the target API outside of the browser.&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;The third is to take advantage of other services that do the work for you. &lt;a href=&quot;https://jsonp.afeld.me/&quot;&gt;This site&lt;/a&gt;, for example, will act as a proxy server for you, without any coding on your behalf. Simply append the target url to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://jsonp.afeld.me/?url=&lt;/code&gt;, and the CORS request will succeed.&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That’s pretty easy…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Indeed, it’s not very difficult to get around the barriers to cross-origin requests. The main question is simply how much work you’re willing/need to do given your use case.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;A &lt;a href=&quot;http://edgeguides.rubyonrails.org/api_app.html&quot;&gt;Rails API&lt;/a&gt; could do the trick. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;One thing to note about this solution is that it creates some security concerns. Since you’ll be passing your data through a proxy you don’t control, you’ll probably want to exercise discretion concerning what sort of information you pass through. The proxy could intercept (a) sensitive data from the API, or (b) private API keys in the URL (which could be a &lt;a href=&quot;https://rosspenman.com/api-key-exposure/&quot;&gt;major problem&lt;/a&gt;). &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 11 Aug 2015 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io/javascript/2015/08/11/cross-origin-resource-sharing.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io/javascript/2015/08/11/cross-origin-resource-sharing.html</guid>
        
        <category>ajax</category>
        
        <category>cors</category>
        
        
        <category>javascript</category>
        
      </item>
    
  </channel>
</rss>
