<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rob Learns Ruby</title>
    <description>I&#39;m learning Ruby and sharing insights along the way.
</description>
    <link>http://rmulhol.github.io//</link>
    <atom:link href="http://rmulhol.github.io//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 17 Nov 2014 16:30:09 -0600</pubDate>
    <lastBuildDate>Mon, 17 Nov 2014 16:30:09 -0600</lastBuildDate>
    <generator>Jekyll v2.3.0</generator>
    
      <item>
        <title>To Infinity and Beyond: Working through Conway&#39;s Game of Life at Global Day of Coderetreat 2014</title>
        <description>&lt;p&gt;This past Saturday, I had the opportunity to participate in the &lt;a href=&quot;http://globalday.coderetreat.org/&quot;&gt;Global Day of Coderetreat&lt;/a&gt;. It was the first time I had ever participated in a code retreat, and I had a lot of fun working with new people, operating under a diverse set of constraints, and iteratively re-approaching the same problem from different angles.&lt;/p&gt;

&lt;p&gt;For this event, our challenge was to code &lt;a href=&quot;http://en.wikipedia.org/wiki/Conway&#39;s_Game_of_Life&quot;&gt;Conway’s Game of Life&lt;/a&gt;. I had never worked on this game before, and I found it to be a perfect fit for the event: a larger problem might have been unmanageable and frustrating, but a smaller one could have been too simple and uninteresting.&lt;/p&gt;

&lt;p&gt;What made things really fun was the changing set of constraints. We would spend 45 minutes working with one person to write a version within a particular set of limitations (don’t use conditionals, don’t write methods with more than 3 lines of code, try out &lt;a href=&quot;http://coderetreat.org/facilitating/activities/tdd-as-if-you-meant-it&quot;&gt;TDD as if you meant it&lt;/a&gt;, etc.), then toss out the code, change pairs, and take another shot with a different set of constraints.&lt;/p&gt;

&lt;p&gt;Deleting the code after each session was oddly liberating. I would have expected it to be really frustrating (“I already tackled this task, I want to move onto the next one!”), but in reality, hitting the reset button and starting from the ground up with the accumulated knowledge of what worked and what didn’t yielded better code on each iteration.&lt;/p&gt;

&lt;p&gt;I also appreciated getting a sense for how to work within an infinite two-dimensional field. In the past, when I’ve worked with a grid structured similarly to the one in this game, I’ve made calculations for determining neighboring cells based on the length of the rows and columns. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# grid of finite width and height:&lt;/span&gt;

 &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---|---|---&lt;/span&gt;
 &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---|---|---&lt;/span&gt;
 &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This setup is sufficient for me to determine lines. I know that the rows will be sequential sets that begin from the base index and extend as long as the side length ([0, 1, 2], [3, 4, 5], [6, 7, 8]), columns will be cumulative lists that begin at each of the indexes in the first row and add the length of the side ([0, 3, 6], [1, 4, 7], [2, 5, 8]), and diagonals will be cumulative lists that begin at either the first or last index in the first row and then add the length of the side plus 1 or the length of the side minus 1, respectively ([0, 4, 8], [2, 4, 6]).&lt;/p&gt;

&lt;p&gt;With the Conway’s Game of Life, however, using such calculations to assess the neighbors would be to impose finitude on an infinite field. How can we calculate the neighbors for a cell if each row and column stretches out infinitely?&lt;/p&gt;

&lt;p&gt;The answer, I learned, is to work with a &lt;a href=&quot;http://en.wikipedia.org/wiki/Cartesian_coordinate_system&quot;&gt;Cartesian coordinate system&lt;/a&gt;. If we replace some base cell (say, index 4 in the example above) with (0, 0) and work outward from there, we can learn the index of all neighbors simply by toggling the x and y values by one. You can do that pretty easily:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_neighboring_cells&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;increments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeated_permutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;increments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neighbor_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbor_col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;neighbor_row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;neighbor_col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neighbor_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbor_col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, we get all repeated permutations of [-1, 0, 1] of length 2 ([[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 0], [0, 1], [1, -1], [1, 0], [1, 1]]), remove [0, 0] (which maps to the index of the cell for which we’re gathering neighbors), and then map those values onto the cell we’ve passed in. The result is an array containing the coordinates for all 8 neighbors:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_neighboring_cells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Working with coordinates like this isn’t all that tricky, but it’s something you might not think of if you’re continually approaching similar problems in similar ways. As Thanksgiving nears, I’m thankful that I had the opportunity to practice tackling a different problem in different ways at Global Day of Coderetreat 2014.&lt;/p&gt;

</description>
        <pubDate>Mon, 17 Nov 2014 00:00:00 -0600</pubDate>
        <link>http://rmulhol.github.io//general/2014/11/17/coderetreat-infinite-plane.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//general/2014/11/17/coderetreat-infinite-plane.html</guid>
        
        <category>coderetreat</category>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Program Like a Debater: Interacting with Clients</title>
        <description>&lt;p&gt;Before I took up programming, I was a debate coach. Before that, I was a college debater. And before that, I was a debater in high school. I’ve been involved with &lt;a href=&quot;http://en.wikipedia.org/wiki/Policy_debate&quot;&gt;policy debate&lt;/a&gt; for most of my life (literally: 14/27 years) and, until recently, it’s the main activity by which I’ve defined my work and identity.&lt;/p&gt;

&lt;p&gt;So when a colleague of mine asked if my background in debate informs the way I approach programming, the answer was obviously yes. It was just tough to explain exactly how. When you work in a field for over a decade, you pick up skills and habits that impact how you learn and interact, but that process is largely subconscious. You don’t think, you just do.&lt;/p&gt;

&lt;p&gt;Still, I do have some experience articulating what I do. Being a debate coach means identifying what helped you succeed and then transmitting that knowledge to your students. Being a &lt;em&gt;good&lt;/em&gt; debate coach means identifying what helps you to help others and then re-affirming that to yourself. The knowledge isn’t hidden away, it just requires a little reflection.&lt;/p&gt;

&lt;p&gt;So, after fielding the inquiry, I’ve decided it’s time for a little reflection.&lt;/p&gt;

&lt;p&gt;To start, I’ll address how my experience with debate informs how I approach interactions with clients. Conversations with a client aren’t adversarial in the same way as the exchanges you’d find in a debate, but getting the most out of the exchange often requires you to think like a debater.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Listen&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of the things most difficult to communicate to new debaters is that they need to take the time to listen to their opponents. It seems obvious; how can you respond if you don’t have a good idea of what you’re responding to? Still, young debaters are more comfortable waxing poetic about the topics they’ve mastered than they are with engaging their opponents. They think – if I can convince the judge I’m an expert on my materials, the rest will work itself out.&lt;/p&gt;

&lt;p&gt;This makes for some pretty awful debates. In debater parlance, we say that they lack “clash.” The two sides have convinced me they’re each experts on some subset of the topic, but it’s difficult to choose one over the other when there is no central point of contention.&lt;/p&gt;

&lt;p&gt;I can tell a debater has grown when their ability to listen offsets the time they need to prepare. As their listening ability goes up, they’re able to quickly understand and evaluate new materials, identifying weaknesses and generating counter-arguments with ease.&lt;/p&gt;

&lt;p&gt;The world of programming is a different animal; you’re not trying to expound upon the faults of your clients. But listening is every bit as important. While you might be tempted to show off all that you can do, you can usually optimize your output by taking the time to understand what your client is saying and addressing their real needs.&lt;/p&gt;

&lt;p&gt;In my conversations with clients, I’ve taken care to soak up every bit of feedback I can extract. While it’s tempting to prove that I’ve addressed previous feedback and demonstrate all that I’ve learned, it’s often more helpful to focus on what I can do better going forward. It’s humbling, but also rewarding. Listening is the key to a productive exchange, be it debate or dialogue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Narrow Down Disagreements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once young debaters begin to grasp the concept of clash, they have a tendency to take it too far. You say economic collapse would be bad? I say &lt;a href=&quot;http://sdiencyclopedia.wikispaces.com/Dedevelopment+(Dedev)&quot;&gt;economic collapse would be good&lt;/a&gt;! You say renewable energy is necessary to ensure the survival of the human race? I say – forget renewable energy, &lt;a href=&quot;http://sdiencyclopedia.wikispaces.com/Wipeout&quot;&gt;the human race should be wiped out&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Young debaters latch onto arguments like these because it lets them fall back into the pattern of not listening without missing out on clash. I don’t have to pay very close attention to what you’re saying if I’m just going to say everything that you think is bad is actually good. But more mature debaters begin to abandon these arguments.&lt;/p&gt;

&lt;p&gt;The optimal strategy for winning a debate is not to counter every single point leveraged by your opponent, since it’s unlikely that everything they’ve said is wrong.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Instead, it’s best to narrow down the “nexus question” - the central point of contention - as much as possible, and then assure beyond a doubt that you’re on the right side of it.&lt;/p&gt;

&lt;p&gt;In conversations with a client, this means doing everything you can to get on the same page, aligning expectations with deliverables as much as possible, and then picking your spots for disagreement. It can be tempting to get defensive and respond to every single piece of feedback reactively, but often taking a step back and looking at the big picture can help you avoid missing the forest for the trees. Find and address the places where there are genuine disagreements, but don’t get bogged down dealing with largely irrelevant sidebars.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Prepare Meticulously&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Participants in policy debate are well known for their preparation. Before &lt;a href=&quot;http://www.nytimes.com/2010/04/18/education/edlife/18debate-t.html?pagewanted=all&amp;amp;_r=0&quot;&gt;the transition to paperless debate&lt;/a&gt;, it was common to see teams carrying around five or six rubbermaid tubs filled with evidence. Debaters prepare to answer every possible argument.&lt;/p&gt;

&lt;p&gt;I said above that the ability to listen offsets a debater’s need to prepare, but the mark of a truly great debater is when they remain committed to preparation while possessing a strong listening ability. Extensive preparation lets you spend more time listening for nuance, since your stock response to the general contours of an opponent’s argument is already at hand.&lt;/p&gt;

&lt;p&gt;Even (perhaps especially) when you’re not dealing with an adversary, preparing for a conversation yields better outcomes. If you know about your client’s objectives and resources, you will be better suited to accommodate their needs. You will enter the conversation ready to get on the same page and get up to speed more quickly.&lt;/p&gt;

&lt;p&gt;Lots of people understand the need to prepare, and of course they do prepare. But participating in debate has taught me the difference between preparing and &lt;em&gt;being prepared&lt;/em&gt;. Glancing at a few documents or running through a practice speech is preparation, but it doesn’t guarantee that you will be prepared. Being prepared means committing the resources at hand to memory and making them second nature.&lt;/p&gt;

&lt;p&gt;You’re not prepared just because you have six rubbermaid tubs filled with documents. You’re prepared when you’re familiar enough with every one of those documents that you know how and when to use each one of them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion: More to Come&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Participating in debate taught me the values of listening well, narrowing disagreements, and preparing meticulously, but it also taught me so much more. While I think that these are the skills most pertinent to interacting with a client, I look forward to expounding further upon what it means to program like a debater in future posts. Stay tuned!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;As put by Winston Churchill, “The greatest lesson in life is to know that even fools are right sometimes.” &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 12 Nov 2014 00:00:00 -0600</pubDate>
        <link>http://rmulhol.github.io//general/2014/11/12/debate-client-interact.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//general/2014/11/12/debate-client-interact.html</guid>
        
        <category>communication</category>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>In the Interest of Transparency: Make Sure Your Meaningful Names Keep Up With Your Code</title>
        <description>&lt;p&gt;In chapter 2 of &lt;a href=&quot;http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&quot;&gt;Clean Code&lt;/a&gt;, Uncle Bob Martin suggests that an important technique for writing quality code is using meaningful names. His rationale is sound. While it might seem like cryptic labels make code more elegant and thus easier to take in, it’s likely that those benefits come at the cost of comprehensibility - as the code grows, it becomes increasingly difficult to understand how all of the various abbreviated identifiers fit together.&lt;/p&gt;

&lt;p&gt;To make my own code more clean, I’ve been using meaningful names as I construct my tic tac toe game. My &lt;code&gt;getMove()&lt;/code&gt; method, for example, has three parameters: the current state of the board, the move identifier for opponent, and the move identifier for the current player. Instead of writing the method as &lt;code&gt;getMove(x, y, z)&lt;/code&gt;, it makes sense to label those parameters like so: &lt;code&gt;getMove(board, opponentMove, myMove)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Using these names for my parameters allows me to carry out all sorts of evaluations to determine which move is optimal while assuring that those evaluations are unambiguous. I can see whether placing &lt;code&gt;myMove&lt;/code&gt; in one place on &lt;code&gt;board&lt;/code&gt; will cause a win (taking it if so), try to block a loss if placing ‘opponentMove&lt;code&gt; somewhere on &lt;/code&gt;board` would cause that and a win is not available, check whether placing either move could cause a fork and take or block it accordingly, etc.&lt;/p&gt;

&lt;p&gt;I proceeded through three AI players writing my method like this: a dumb player that returns random moves, a smart AI player that manually checks for wins, losses, forks, and the middle space, and an abstract AI player using the minimax algorithm to consider, evaluate, and score all possible moves. Everything worked perfectly.&lt;/p&gt;

&lt;p&gt;However, I later added a configuration option. Instead of having the game run in default mode (3x3 board, human vs computer, ‘X’ v ‘O’), I would now allow the user to construct custom versions of the game (variable board sizes, player identities, and move signatures). Things were still working well, with one caveat: the minimax AI player was not functioning properly when it was player 1.&lt;/p&gt;

&lt;p&gt;This problem had me very confused. I spent a number of hours tinkering with my AI player trying to figure out where I had introduced some subtle error into my minimax algorith.&lt;/p&gt;

&lt;p&gt;Unfortunately, the error lied elswhere. It turned out that my Runner class, when it was making the call to &lt;code&gt;getMove()&lt;/code&gt;, sent the arguments &lt;code&gt;board, player1Move, player2Move&lt;/code&gt;. Here, I had used meaningful names for my arguments, but they expected to be operating within the game’s default configuration. Once I added the option to customize the game, &lt;code&gt;getMove()&lt;/code&gt; was failing to provide correct moves when the AI player was player 1 because it was always receiving &lt;code&gt;player2Move&lt;/code&gt; as &lt;code&gt;myMove&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This error is entirely my own, rather than a fault with the practice of using meaningful names. Indeed, the third point in Uncle Bob’s chapter on meaninful names is to avoid disinformation. What I learned, however, is that you must be dilligent with the meaningful names you choose so that the code you write actually expresses your intentions. Over-specifying right now might seem like it makes your names even more meaningful, but it comes at the cost of requiring abstraction when you abstract related features in other parts of your program.&lt;/p&gt;

</description>
        <pubDate>Sat, 01 Nov 2014 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io//general/2014/11/01/transparent-meaningful-names.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//general/2014/11/01/transparent-meaningful-names.html</guid>
        
        <category>variables</category>
        
        <category>methods</category>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Figuring Out Code: A Comment on Comments</title>
        <description>&lt;p&gt;When you begin learning a programming language, one of the first things you come across is how to create comments - blocks of text that explain what surrounding code does but are not processed when the program runs. &lt;/p&gt;

&lt;p&gt;People teaching you want you to know about comments so that they can provide you with examples of working code that are self-explanatory, and you want to know about comments for a variety of reasons: they help &lt;em&gt;you&lt;/em&gt; write self-explanatory code, they let you run different variations of the same program without having to completely delete text you want to remove temporarily, they allow you to pair pseudo-code with real code, and so forth. &lt;/p&gt;

&lt;p&gt;One of the things I’ve learned, however, is that comments are frowned upon by some in the coding community. A mentor of mine, for example, once told me that “comments are where understanding goes to die.” Another colleage published &lt;a href=&quot;http://blog.8thlight.com/dariusz-pasciak/2014/08/13/an-appeal-to-cs-teachers.html&quot;&gt;a plea to CS teachers&lt;/a&gt; begging instructors to abandon draconian requirements that students write comments for every line of code. Clearly, not all programmers are on board with the idea that comments ought to be your go-to tool for writing readable code.&lt;/p&gt;

&lt;p&gt;Where does this sentiment come from? What’s wrong with comments intended to help you understand code?&lt;/p&gt;

&lt;p&gt;Well, the answer is twofold:&lt;/p&gt;

&lt;p&gt;(1) Comments often don’t get updated as regularly as the source code they explain, so they can begin to actually work against understanding. If a comment says that a block of code does one thing when it’s been upgraded to do something different, that comment can leave you scratching your head wondering how the code that says it does one thing can look like it does something very different (hint: &lt;em&gt;it does&lt;/em&gt;). (Note: You could obviously be dilligent about updating your comments each time you update your code, but this is a sizable burden that many  do not carry throughout the life of a program. If only there were some alternative …)&lt;/p&gt;

&lt;p&gt;(2) There &lt;em&gt;is&lt;/em&gt; a superior alternative. Most of the places where you’d insert a comment, you’d be much better off naming methods and variables in ways that are more transparent. Instead of naming your “Hello, world!” method &lt;code&gt;hw()&lt;/code&gt;, you could name it &lt;code&gt;printHelloWorld()&lt;/code&gt;. When your names leave little room for ambiguity, there’s little need for explanatory comments &lt;em&gt;and&lt;/em&gt; that lack of ambiguity is more likely to stand the test of time.&lt;/p&gt;

&lt;p&gt;This seems like an open-and-shut case in favor of the parties who proclaim that we ought to use comments sparingly.&lt;/p&gt;

&lt;p&gt;And yet, I recently had an experience with comments that led me to re-evaluate their utility.&lt;/p&gt;

&lt;p&gt;The backstory is this: I’ve been working on writing a game of tic tac toe in Java, where one feature is an unbeatable AI player. To make my AI player unbeatable, I’ve been putting together a &lt;a href=&quot;http://en.wikipedia.org/wiki/Minimax&quot;&gt;minimax algorithm&lt;/a&gt; to check the board and pick the optimal move. &lt;/p&gt;

&lt;p&gt;The premise of minimax is straightforward enough - examine every possible game state resulting from any given move up to a certain depth (in this case, the end of the game), score each of the moves accordingly, and then choose the move that minimizes the maximum loss (i.e. reduces the worst case scenario).&lt;/p&gt;

&lt;p&gt;Implementing the minimax algorithm, however, is another story. There are a lot of moving pieces, and an error in one place can cascade throughout the entire program, tainting the results.&lt;/p&gt;

&lt;p&gt;Late in the afternoon today, after working on my algorithm for a day and a half, I still couldn’t get it working. The AI player would place moves in interesting patterns and even secure wins against sub-optimal play, but it wasn’t properly avoiding moves that were all but certain to result in a loss.&lt;/p&gt;

&lt;p&gt;The code I had looked right to me, and I had been tinkering with it for so long that I no longer knew what to change, so I opted to consult a mentor. But first, I thought, this could be a good time for comments. I didn’t intend comments to make it into my final program, but I at least wanted to document what I thought every line of code in my program was doing before going and asking someone else to help decipher what was going wrong.&lt;/p&gt;

&lt;p&gt;So, I set to work, meticulously commenting each line. Most things were easy to comment - I had been reading about minimax for so long, and looking at so many examples of pseudo and real code implementing the method that simply laying out and describing each step was a welcome form relief. &lt;/p&gt;

&lt;p&gt;But, wouldn’t you know it, I found a few places where I had confused myself (what was I thinking when I put in &lt;em&gt;this&lt;/em&gt; line of code?). So, I trimmed and edited, removing things I couldn’t explain and adding things I needed to make my explanations coherent. And, after it all, I chose to give the program one final try.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It worked&lt;/em&gt;. &lt;strong&gt;IT WORKED!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I was ecstatic. Comments led me to articulate what I was doing and make sure that the output matched the intentions, and that’s exactly what I needed to do to get things up and running.&lt;/p&gt;

&lt;p&gt;I promptly deleted my comments, made sure spacing and indentation all looked pretty, and then pushed my project to Github. Happy times.&lt;/p&gt;

&lt;p&gt;You may be above all of this. You may intuitively digest algorithms and output working examples without intermediaries. In that case, please kindly disregard.&lt;/p&gt;

&lt;p&gt;But, if you’re like me, and you find yourself struggling to implement something you understand conceptually and know should work, maybe give comments a try. You don’t need to keep them. You don’t need to tell others you used them. But articulating your thoughts can sometimes help you implement them, and comments helped me do that today.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[Note: I recently discovered that my personal epiphany described herein is common among programmers and has its own name: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rubber_duck_debugging&quot;&gt;Rubber Duck Debugging&lt;/a&gt;]&lt;/em&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 30 Oct 2014 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io//general/2014/10/30/comment-on-comments.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//general/2014/10/30/comment-on-comments.html</guid>
        
        <category>comments</category>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Conundrums in TDD Land: Improving Elegance vs Reducing Dependencies</title>
        <description>&lt;p&gt;As I’ve been doing more work with Java, one of the things I’ve focused on is getting my Java TDD abilities up to where they are with Ruby. JUnit is a whole different beast from Rspec, and figuring out how to structure and write test within this framework has been a new and interesting challenge.&lt;/p&gt;

&lt;p&gt;One of the things I’ve focused on lately is making sure that my tests for one object don’t depend on other objects. This isn’t by itself a departure from the form of testing I’ve done in Ruby/Rspec - you always want tests of one object to work regardless of changes to other peripheral objects - but figuring out the implementation details has sometimes served to remind me of just how new to this language I still am.&lt;/p&gt;

&lt;p&gt;For example, right now I’m working on a tic tac toe game. One component of the game is an AI player. This object is supposed to react to moves chosen by the human player so that it can choose the optimal move for itself. To do so, it looks at the current state of the board and evaluates how likely any given move is to maximize its chances of winning.&lt;/p&gt;

&lt;p&gt;This isn’t a particularly novel challenge for those who are familiar with building a tic tac toe game, but it does create a temptation to inject unwanted dependencies into my testing suite. Since my AI player needs to look at the board to figure out its next move, it seems easiest to inject an instance of the board class into my tests for the AI Player and then just work with that. &lt;/p&gt;

&lt;p&gt;Doing so, however, would result in unsatisfactory tests. The tests in my AI player could break due to unrelated changes in my board, and I wouldn’t really know whether or not there was a problem with my AI player itself. The goal should be to make the tests on the AI player rely only on the logic within that object, and then to trust that messages sent to the board will work fine as long as they are sent.&lt;/p&gt;

&lt;p&gt;To actualize this goal, I’ve learned that I generally want to be passing things like the board into my methods via parameters, rather than initializing them at the top as instance variables. When the board being evaluated is simply an argument received by a method, it’s easy to simulate various configurations of that object for all sorts of different tests. If that board were an instance of the board class that was pre-determined at the top of the tests, then I’d be relying on the sort of dependencies I’m hoping to avoid.&lt;/p&gt;

&lt;p&gt;One problem this has created for me, however, is that it prevents me from using shortcuts that I feel would make my code more elegant. Passing in arguments generally means creating methods with up to three or four parameters numerous times throughout my classes, where many of them could be set by default if I relied upon calls to instance variables. &lt;/p&gt;

&lt;p&gt;This isn’t a huge problem; I’ll take well tested code over elegant code any day. But, one of things I look forward to figuring out as I move ahead is how to have my cake and eat it too. There must be ways to write code that is well tested and elegant, and that’s one of the things I’ll be looking to learn as I continue my journey.&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Oct 2014 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io//java/2014/10/26/tdd-elegance-dependencies.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//java/2014/10/26/tdd-elegance-dependencies.html</guid>
        
        <category>TDD</category>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>Working with Packages: Compiling Classes that Implement Interfaces</title>
        <description>&lt;p&gt;To get more familiar with Java, one of the resources I’ve been working through is &lt;a href=&quot;http://www.amazon.com/Java-Complete-Reference-Ninth-Edition-ebook/dp/B00HSO0X6C&quot;&gt;&lt;em&gt;Java: The Complete Reference, Ninth Edition&lt;/em&gt;&lt;/a&gt;. It’s a bit of a long slog (the book is 1312 pages), but I’ve enjoyed getting a fairly comprehensive overview of the language while recreating the numerous example programs offered throughout.&lt;/p&gt;

&lt;p&gt;Though I use an IDE (&lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ&lt;/a&gt;) for my own projects, I’ve been completing the exercises from the book in Vim for two reasons: (1) I want to get a good understanding of what’s going on ‘behind the curtain,’ without relying on all the legwork IntelliJ does for me; and, (2) I don’t want to create new projects in IntelliJ for each of the very small programs in the book (so far I’ve completed over 200, and most are fewer than 50 lines).&lt;/p&gt;

&lt;p&gt;Recently, I was working on an example in Chapter 9, where the objective is to practice implementing interfaces. To do so, you first create an interface &lt;code&gt;Callback&lt;/code&gt;, then a class &lt;code&gt;Client&lt;/code&gt; that implements the interface, and then finally a class &lt;code&gt;TestIface&lt;/code&gt; that both declares an interface reference variable and calls the method from &lt;code&gt;Client&lt;/code&gt; on it. &lt;/p&gt;

&lt;p&gt;Working in Vim, I first placed all of these components (one interface and two classes) into a single file. It compiled and ran just fine.&lt;/p&gt;

&lt;p&gt;The next lesson adds two more classes: one, &lt;code&gt;AnotherClient&lt;/code&gt;, that implements the interface differently, and another, &lt;code&gt;TestIface2&lt;/code&gt;, that calls the method from &lt;code&gt;AnotherClient&lt;/code&gt; on an interface reference variable. So that I could minimize retyping, I opted to place each component in a separate file: one for the interface, and four for the respective classes.&lt;/p&gt;

&lt;p&gt;The file containing the interface compiled just fine, but the classes were giving me guff:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;error:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cannot&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;symbol:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Callback&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I was completely baffled. How could it be that &lt;code&gt;javac Callback.java&lt;/code&gt; would work just fine, but &lt;code&gt;javac Client.java&lt;/code&gt; would produce the error above? I could see that &lt;code&gt;Callback.class&lt;/code&gt; did indeed reside in the exact same package directory as &lt;code&gt;Client.java&lt;/code&gt;, but the compiler wasn’t finding it.&lt;/p&gt;

&lt;p&gt;I opted to try it out in IntelliJ. While I don’t want to rely on the IDE as a shortcut, I was hoping that I could learn something by seeing how it fixed the problem. But this made things even more confusing - the &lt;em&gt;exact same&lt;/em&gt; source code compiled in IntelliJ without a hitch. &lt;/p&gt;

&lt;p&gt;I fooled around for awhile (reading through examples of similar problems on &lt;a href=&quot;http://stackoverflow.com/questions/16102893/cannot-find-symbol-saying-implemented-interface-not-found&quot;&gt;stackoverflow&lt;/a&gt;, using &lt;code&gt;import&lt;/code&gt; in myriad different ways, changing the names of the interface and classes, etc) trying to find an answer before I stumbled upon something that worked:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javac&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyPack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It turns out that in order to compile a class that implements an interface and resides within a package, you have to back up out of that package and compile by providing the file directory that includes the package. &lt;/p&gt;

&lt;p&gt;Who knew?&lt;/p&gt;

</description>
        <pubDate>Wed, 15 Oct 2014 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io//java/2014/10/15/packages-interfaces-classes.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//java/2014/10/15/packages-interfaces-classes.html</guid>
        
        <category>packages</category>
        
        <category>interfaces</category>
        
        <category>classes</category>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>A Turn Toward Java: First Impressions</title>
        <description>&lt;p&gt;Recently, I started writing code in Java. I certainly haven’t finished learning Ruby, but the impulse to stretch out toward other languages is something I could no longer suppress. I’m hoping that working with a ‘closer to the metal’ object-oriented language will give me some fresh perspective on what I can accomplish, and I’m also looking to get familiar with the process of learning new languages; I suspect that’s a skill I’ll put to use many times over the next few years.&lt;/p&gt;

&lt;p&gt;One of the first things that struck me about Java is its verbosity. In Ruby, the ‘hello world’ program looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello, world!&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But in Java, it looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While Ruby does a lot of work behind the scenes and lets you accomplish tasks with really elegant and readable code, Java requires a little more legwork. You can’t just execute one command to print “Hello, world!” to the console; you also have to create a class, declare a &lt;code&gt;main&lt;/code&gt; method, use proper opening and closing curly braces, &lt;em&gt;and&lt;/em&gt; be sure to end every statement with a semicolon.&lt;/p&gt;

&lt;p&gt;Another thing that distinguishes Java from Ruby is that it’s a ‘strong static’ language (Ruby is ‘strong dynamic’). What this means is that you must declare types for variables and method returns, and then compile source code into ‘bytecode’ before it can run. While Ruby lets you write code and then immediately run it with the &lt;code&gt;ruby &amp;lt;filename&amp;gt;&lt;/code&gt; command, Java requires you to first enter &lt;code&gt;javac &amp;lt;filename&amp;gt;&lt;/code&gt; (to compile) and then enter &lt;code&gt;java &amp;lt;classname&amp;gt;&lt;/code&gt; (to run). If your source code contains obvious errors, it won’t compile and (therefore) it won’t run.&lt;/p&gt;

&lt;p&gt;While the above distinctions might make Java sound like more trouble than it’s worth, there are some merits to these features. &lt;/p&gt;

&lt;p&gt;First, all of the verbosity paints a better picture of what’s going on ‘under the hood’. While I’ve encountered some baffling errors in Ruby where the code didn’t do what I expected, it’s hard to even get to those sort of lofty expectations in Java since you’re laying out each step in greater detail.&lt;/p&gt;

&lt;p&gt;Second, the process of compiling is really great for both learning the language and catching errors. While some errors are sure to get through either way, the failed compilations help you to recognize many of them before they impact your code. They also train you to start writing code the right way from the outset - you can only encounter so many compilation errors from failing to include a type or a semicolon before including those things becomes second nature.&lt;/p&gt;

&lt;p&gt;Above and beyond the merits of its features, knowing a little bit about Java has certainly yielded some positive dividends for learning about programming more generally. So many of the recommended books I’ve been working through have examples written in Java, and those used to look like Greek to me. Now they’re starting to make more sense, and I’m feeling like previously indecipherable resources are becoming more accessible.&lt;/p&gt;

&lt;p&gt;So, unward and upward. To Java, and beyond!&lt;/p&gt;

&lt;p&gt;Oh, by the way, no chance I’m changing the name of my blog. We’ve got a history.&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Oct 2014 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io//java/2014/10/14/turn-toward-java.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//java/2014/10/14/turn-toward-java.html</guid>
        
        <category>beginning</category>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>Programmer Beware: Potential Problems Getting User Input in Ruby</title>
        <description>&lt;p&gt;Does your program rely on user input? Does it require users to enter an integer? Do you use user input for other calculations in your program? If you’ve answered yes to any of these questions - or, god forbid, all of them - then there are some things you should be aware of. Your program may not run as you expect. It may crash at times you don’t expect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thing You Should Know #1: The Absence of Input is Input&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Maybe you want to write a little program that prompts the user for an integer. To be sure you received what they intened, you want to offer the user a chance to confirm their input. To make sure you can deal with numerous variations of “yes”, you convert the input to lower case and match the first letter against “y”:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_and_confirm_integer&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user_integer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_integer&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user_confirmation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirm_integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_confirmed?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_confirmation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user_integer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_integer&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user_confirmation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirm_integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Great, thanks for entering &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_integer&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_integer&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Enter an integer: &amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user_integer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;gets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chomp&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user_integer&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;confirm_integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Just confirming, you did mean to enter &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_integer&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;?&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user_confirmation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;gets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chomp&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user_confirmation&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;input_confirmed?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;downcase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This all works well and good until a user decides to stonewall your program. Your &lt;code&gt;input_confirmed?&lt;/code&gt; method calls &lt;code&gt;.downcase&lt;/code&gt; on the first element of &lt;code&gt;user_confirmation&lt;/code&gt;, but the absence of a response will equate to &lt;code&gt;nil&lt;/code&gt;. Your attempt to call &lt;code&gt;.downcase&lt;/code&gt; on &lt;code&gt;nil&lt;/code&gt; will provoke an unfortunate message: &lt;code&gt;undefined method &#39;downcase&#39; for nil:NilClass (NoMethodError)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Of course, the easiest way to hedge against this error would simply be to avoid calling &lt;code&gt;.downcase&lt;/code&gt; on a value that might return &lt;code&gt;nil&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;input_confirmed?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Y&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This program will continue running until the user enters a string that starts with a ‘y’ (which, hopefully, confirms that they intended to enter the integer you received), without throwing the &lt;code&gt;NoMethodError&lt;/code&gt; you get by calling &lt;code&gt;.downcase&lt;/code&gt; on &lt;code&gt;nil&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thing You Should Know #2: Strings Evaluate to Zero&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Say you want to add another layer of confirmation to your program. You want to validate not only that the user has entered what &lt;em&gt;they&lt;/em&gt; intended to enter, but also that the input conforms to what &lt;em&gt;you&lt;/em&gt; are expecting (in this case, an integer).&lt;/p&gt;

&lt;p&gt;You know you can’t just check whether the value you get returned from &lt;code&gt;gets&lt;/code&gt; is an integer, since that method always returns a string. So you might opt to call &lt;code&gt;.to_i&lt;/code&gt; on the string, and then check whether that call returns a valid integer.&lt;/p&gt;

&lt;p&gt;This, however, will get you into trouble. The method &lt;code&gt;.to_i&lt;/code&gt;, unfortunately (fortunately?), is set to move along happily converting strings that are not integers into 0. This saves you from a pesky exception near the &lt;code&gt;.to_i&lt;/code&gt; call, but it can result in some faulty calculations when you use that 0 elsewhere.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;not an integer&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Possible solution: check that a 0 returned by &lt;code&gt;.to_i&lt;/code&gt; is actually the result of the string “0”:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;user_input_is_valid?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This method will validate that a 0 you get from &lt;code&gt;.to_i&lt;/code&gt; was a 0 to begin with, and allow other integers to proceed unheeded.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Takeaway: Trust No One&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Though the above examples offer ways to avoid potential errors, the larger takeaway offers more general application. It is: don’t trust your users to do what you expect. It’s good to set up confirmations that guide the user onto the paths you’ve chosen, and to double check that your guidance is being heeded. If you don’t, you’ll be sure to find numerous other instances where users are doing things you don’t expect. And, more than likely, that’ll be causing your program to operate in ways you didn’t expect.&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Oct 2014 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io//ruby/2014/10/11/problems-with-input.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//ruby/2014/10/11/problems-with-input.html</guid>
        
        <category>io</category>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>More on Mocks: Passing in Input</title>
        <description>&lt;p&gt;In a couple of &lt;a href=&quot;/ruby/2014/10/02/testing-with-mocks.html&quot;&gt;previous&lt;/a&gt; &lt;a href=&quot;/ruby/2014/10/08/revisiting-mocks.html&quot;&gt;posts&lt;/a&gt;, I’ve been documenting my foray into the world of mocks. So far, I’ve been using mocks to verify that outgoing messages get sent without incurring unwanted side effects. To do so, I’ve overridden the methods from my real objects so that their mock versions return a unique identifier. For example, my mockIO looked like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MockIO&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;print was called&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gets&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;gets was called&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I find this formatting helpful because it does what I want and not more - I test that &lt;code&gt;print&lt;/code&gt; and &lt;code&gt;gets&lt;/code&gt; are called, but I don’t get things printing to the screen and/or prompting for input (as I would with the real versions). As a bonus, the unique identifiers assure me that I’m calling the &lt;em&gt;right&lt;/em&gt; methods; I don’t have to worry about the possibility that my tests are just confirming that &lt;em&gt;a&lt;/em&gt; method was called (i.e. if I set all the methods in my mock to return a boolean, I could get a &lt;code&gt;true&lt;/code&gt; returned even if I called the wrong method).&lt;/p&gt;

&lt;p&gt;Recently, however, I’ve run into a problem: some of the logic of my program relies on taking and using user input. In order to test that, I want to make sure that those methods continue prompting for user input until the get an appropriate response. For example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_input&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gets&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Putting aside the numerous refactorings that could make this code better (I’ve put in several responsibilities to clarify the context), the irreducible nature of my problem is that my standard mock is going to break the test. &lt;code&gt;get_input&lt;/code&gt; keeps waiting and waiting for an integer between 0 and 4, but my mock &lt;code&gt;gets&lt;/code&gt; only ever returns “gets was called”.&lt;/p&gt;

&lt;p&gt;So, of course, I could separate out the code following the &lt;code&gt;until&lt;/code&gt; statement and test that, but I’m still going to want some way of verifying that the loop keeps going until it receives valid input (and I’m also going to want that test to eventually &lt;em&gt;provide&lt;/em&gt; valid input, so that the test doesn’t keep waiting indefinitely). &lt;/p&gt;

&lt;p&gt;One way I’ve come up with to do that is to pass in input to my mock. Now the mockIO can look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MockIO&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;gets was called&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;print was called&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gets&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, when I initialize an instance of my main class in the tests, I can inject in an instance of my mockIO with whatever input I want to execute. For example, if I pass in &lt;code&gt;[&#39;-7&#39;, &#39;13&#39;, &#39;2&#39;]&lt;/code&gt; to my mockIO and run tests on &lt;code&gt;get_input&lt;/code&gt;, I can expect that method to return 2. &lt;/p&gt;

</description>
        <pubDate>Thu, 09 Oct 2014 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io//ruby/2014/10/09/mocks-with-input.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//ruby/2014/10/09/mocks-with-input.html</guid>
        
        <category>tdd</category>
        
        <category>mocks</category>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>Working with Rspec: Revisiting Testing With Mocks</title>
        <description>&lt;p&gt;So you’ve got most of your project built, tests are passing, and the last task that remains is to piece together all of the public interfaces into a working program. Woohoo! You’ve come quite a ways! Since you did all of the legwork to get here, it probably feels like  a quick jump to reach that pinnacle that is a working final product. The impulse to spike it - to forego the principles of test-first design in favor of a rapid push to make everything run - may be strong. But you must stick to the path. Veering off now will only reintroduce the complications you’ve managed to avoid so far by doing things the right way.&lt;/p&gt;

&lt;p&gt;Presuming, then, that you intend to stay on track, how are you to do so? You could migrate over all of the tests for methods from other classes that you’re now introducing into your main class, but that feels pretty suspect (not very DRY, and probably too knowledgeable about what’s going on in the other ‘black boxes’). You could also reserve tests for checking operations that are being introduced for the first time in the main class (e.g. the way that operations are interacting with one another), but that will leave a broad swath of your code untested. There must be a better way.&lt;/p&gt;

&lt;p&gt;One approach that I’ve been working on recently (and &lt;a href=&quot;/ruby/2014/10/02/testing-with-mocks.html&quot;&gt;writing about&lt;/a&gt;) is using mocks. Mocks make it easy to check that your main interface is interacting appropriately with the other classes in your program, without having to know too much about what’s going on inside of them. Using mocks, you can check that outgoing command messages get sent without asking too much about the side effects we encounter when they are.&lt;/p&gt;

&lt;p&gt;Before proceeding, I should mention two things:&lt;/p&gt;

&lt;p&gt;(1) I’ve opted to ‘roll my own’ mocks. I know that Rspec and other testing frameworks provide various automated features for constructing test doubles easily and efficiently, but I’ve &lt;a href=&quot;http://blog.8thlight.com/josh-cheek/2011/11/28/three-reasons-to-roll-your-own-mocks.html&quot;&gt;heard&lt;/a&gt; that avoiding those can yield optimal results. Plus, I’m interested in getting a feel for what’s going on beneath the hood before I hop in and start driving the car.&lt;/p&gt;

&lt;p&gt;(2) I’m happily indulging in mocks for now, perhaps too much. Though I’ve encountered some who &lt;a href=&quot;http://ngauthier.com/2010/12/everything-that-is-wrong-with-mocking.html&quot;&gt;claim&lt;/a&gt; that mocks can make tests brittle, and others who &lt;a href=&quot;http://googletesting.blogspot.com/2013/05/testing-on-toilet-dont-overuse-mocks.html&quot;&gt;advise&lt;/a&gt; simply to avoid overusing mocks, I’m using them a lot to aid my learning; using mocks liberally now will make it easier to use them appropriately when I need them down the line.&lt;/p&gt;

&lt;p&gt;So, with that said, how can one write the mocks that let you test that outgoing command messages are sent, and just that?&lt;/p&gt;

&lt;p&gt;At first, I was overwriting methods from my (non-mock) classes so that they would return a boolean. Set an instance variable to &lt;code&gt;false&lt;/code&gt; when the new mock object is initialized, then set it to &lt;code&gt;true&lt;/code&gt; when the appropriate method is called. For example, my MockIO object initially looked like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MockIO&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:print_was_called&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@print_was_called&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@print_was_called&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now I can inject my MockIO object in place of my real IO object when I’m testing my main class, and then assure I’m receiving the appropriate boolean after the outgoing command messages are sent. For example, if my main class looked like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;intialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@io&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then I can test it this test:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;mockio&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;main&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:new_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;described_class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MockIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;#print_message&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;calls print from io&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printed_message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printed_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And, there we have it. I’ve now rolled my own mock and I can inject it into my tests to assure that outgoing command messages are being sent without having to do anything more. I don’t have to incur any side effects the commands might have when they’re sent to my real IO, and I don’t have to worry about unexpected outcomes I could see using an automated mocking framework. Cool!&lt;/p&gt;

&lt;p&gt;But, this approach does have some downsides. First of all, I’m going to be intializing a lot of booleans - not a big problem, but something that irks me. Second, and perhaps most importantly, I’m running the risk of verifying that I’ve sent the wrong message. If all of my method calls in the mock object return &lt;code&gt;true&lt;/code&gt;, then a verification that one method has been sent will be indistinguishable from the verification that another method has been sent. I won’t be able to verify that I actually sent the &lt;em&gt;right&lt;/em&gt; method.&lt;/p&gt;

&lt;p&gt;So, I’ve reworked my mocks so that each method returns a unique identifier. Now, instead of returning &lt;code&gt;true&lt;/code&gt;, the &lt;code&gt;print&lt;/code&gt; method returns &lt;code&gt;&quot;print called&quot;&lt;/code&gt;. It looks like this: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MockIO&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;print called&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For this MockIO, my test looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;mockio&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;main&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:new_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;described_class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MockIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;#print_message&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;calls print from io&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printed_message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printed_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;print called&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Everything still works, and I have verification not only that an outgoing command message is being sent, but also that the &lt;em&gt;right&lt;/em&gt; outgoing command message is being sent.&lt;/p&gt;

&lt;p&gt;When I multiply this process for each of the other classes and methods I’m injecting into main, I end up with a nicely tested main class that I’m confident is working properly regardless of what’s going on in the other classes that get injected into it. I don’t have to worry about side effects cluttering up my test suite, and things run more quickly since the various unit tests are isolated from one another.&lt;/p&gt;

</description>
        <pubDate>Wed, 08 Oct 2014 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io//ruby/2014/10/08/revisiting-mocks.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//ruby/2014/10/08/revisiting-mocks.html</guid>
        
        <category>tdd</category>
        
        <category>mocks</category>
        
        
        <category>ruby</category>
        
      </item>
    
  </channel>
</rss>
