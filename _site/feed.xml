<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rob Writes Code</title>
    <description>Random thoughts and musings.
</description>
    <link>http://rmulhol.github.io/</link>
    <atom:link href="http://rmulhol.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 06 Nov 2019 15:41:18 -0600</pubDate>
    <lastBuildDate>Wed, 06 Nov 2019 15:41:18 -0600</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Caching Ethereum Data: Events vs Storage</title>
        <description>&lt;p&gt;One core challenge in the Ethereum ecosystem is accessing historical data.
Want to know what your token balance was last week?
Hopefully you’ve allocated &lt;a href=&quot;https://etherscan.io/chartsync/chainarchive&quot;&gt;over 3TB of disk&lt;/a&gt; to running an archive node, or else that data’s likely been pruned.&lt;/p&gt;

&lt;p&gt;Historical state pruning is no accident.
A full node’s goal is to validate the current state of the network, which only requires applying transactions to the most recent state.
If your objective is to enable performant queries against previous states, it makes sense to use a tool that’s specifically devoted to that task.&lt;/p&gt;

&lt;p&gt;But how would one build such a tool?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Events&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A common technique for caching historical data is track &lt;a href=&quot;https://solidity.readthedocs.io/en/latest/contracts.html#events&quot;&gt;events&lt;/a&gt;.
During execution, contracts can emit events that provide a window into the contract’s internal state at that point in time.
Full nodes currently retain all events indefinitely, and the &lt;a href=&quot;https://github.com/ethereum/wiki/wiki/JSON-RPC&quot;&gt;JSON RPC API&lt;/a&gt; enables subscribing to desired events in real time - so building a cache derived from events minimizes resource usage.&lt;/p&gt;

&lt;p&gt;Unfortunately, this approach has several drawbacks.&lt;/p&gt;

&lt;p&gt;For one, you’re depending on contract authors to include all the data you desire in the events they emit.
If they decide that some data points are not worthy of events (and the gas costs they incur), then you’re out of luck - your cache will have to exclude that data.&lt;/p&gt;

&lt;p&gt;Additionally, there’s no guarantee that the data in an event is accurate.
If you haven’t inspected the contract’s source code to verify that an event’s payload is correctly derived from the expected storage slot(s), it could be coming from anywhere.&lt;/p&gt;

&lt;p&gt;In many cases, an event doesn’t even capture a contract’s state per se, but rather the delta between old and new values.
In that case, your cache depends on capturing &lt;em&gt;every&lt;/em&gt; relevant event (with handling for events pruned by reorgs) and then correctly applying arithmetic to derive the product of the deltas.&lt;/p&gt;

&lt;p&gt;Oh yeah, and node developers have &lt;a href=&quot;https://gist.github.com/karalabe/60be7bef184c8ec286fc7ee2b35b0b5b&quot;&gt;signaled&lt;/a&gt; that retaining all historical events may not remain viable - events may eventually be pruned along with previous states.&lt;/p&gt;

&lt;p&gt;This is clearly not a very good situation.
Events can alert you to the fact that something happened, but they should not be considered a reliable proxy for reconstructing historical state.&lt;/p&gt;

&lt;p&gt;So where does that leave us?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Storage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The place to go for accessing historical contract storage values is, wait for it… storage!
The aforementioned JSON RPC API includes a &lt;a href=&quot;https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getstorageat&quot;&gt;function for accessing storage slots directly&lt;/a&gt;.
If you query for data at a given storage slot, then you know that you’re getting an accurate representation of the data you desire.
You can even &lt;a href=&quot;https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getproof&quot;&gt;get proof&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are a couple of hurdles.
Accessing storage at previous blocks means running an archive node, and building up keys for storage slots in mappings and dynamic arrays is no picnic.&lt;/p&gt;

&lt;p&gt;But, on the whole, if you want to build a reliable cache - this is currently the cost of doing business.
Looking forward to covering how you can minimize those costs and get your queries right in upcoming posts!&lt;/p&gt;
</description>
        <pubDate>Wed, 06 Nov 2019 00:00:00 -0600</pubDate>
        <link>http://rmulhol.github.io/blockchain/2019/11/06/ethereum-caching-events-vs-storage.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io/blockchain/2019/11/06/ethereum-caching-events-vs-storage.html</guid>
        
        <category>ethereum</category>
        
        <category>rpc</category>
        
        
        <category>blockchain</category>
        
      </item>
    
      <item>
        <title>Working With SQL: Deriving New Data From Existing Columns</title>
        <description>&lt;p&gt;If you spend your time working on web applications, it’s almost inevitable that you will at some point find yourself working with a relational database. And even if that database is ultimately &lt;a href=&quot;https://blog.8thlight.com/uncle-bob/2012/05/15/NODB.html&quot;&gt;a peripheral detail of your application&lt;/a&gt;, it’s one with which you’ll want to have a fairly intimate familiarity.&lt;/p&gt;

&lt;p&gt;What do I mean by intimate familiarity? An ability to interact with that database comfortably, without the aid of an ORM. Putting aside questions as to whether &lt;a href=&quot;http://seldo.com/weblog/2011/08/11/orm_is_an_antipattern&quot;&gt;ORM is an anti-pattern&lt;/a&gt; (or &lt;a href=&quot;http://blogs.tedneward.com/2006/06/26/The+Vietnam+Of+Computer+Science.aspx&quot;&gt;the Vietnam of computer science&lt;/a&gt;), there will almost certainly be situations in which understanding the underlying syntax of the database will make your life easier.&lt;/p&gt;

&lt;p&gt;In this post, we’ll get started with nurturing that sort of familiarity by discussing how to accomplish a simple task in PostgreSQL: deriving new data from the combination and/or evaluation of fields in a database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Combination: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UNION&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Accessing data from a table’s columns is fairly straightforward:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- one column from a table&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one_column&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- multiple columns from a table&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one_column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another_column&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- all columns from a table&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These queries allow us access data that’s either identical to or a subset of existing columns. But what if we want our query’s results to &lt;em&gt;combine&lt;/em&gt; data from several columns?&lt;/p&gt;

&lt;p&gt;For example, imagine that you have a table &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;people&lt;/code&gt; that stores the name, favorite actor, and favorite actress of several individuals.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;id&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;name&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;favorite_actor&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;favorite_actress&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Bob&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Brad Pitt&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Angelina Jolie&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Jane&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Bradley Cooper&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Jennifer Lawrence&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Sally&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Leonardo DiCaprio&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Kate Winslet&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now imagine that we want to extract the favorite actors and actresses into a new column representing all movie stars, without respect for gender.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;movie_star&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Brad Pitt&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Angeline Jolie&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Bradley Cooper&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Jennifer Lawrence&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Leonardo DiCaprio&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Kate Winslet&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The simple queries listed at the top of this section won’t work, since they return columns as they are represented in our database.&lt;/p&gt;

&lt;p&gt;To query for a combination of data from several columns, we can take advantage of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UNION&lt;/code&gt; operation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;favorite_actor&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;movie_star&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;UNION&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;favorite_actress&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UNION&lt;/code&gt; operation lets us combine the results of several queries, allowing us to aggregate data both within and across tables.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Derivation: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CASE&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the case of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UNION&lt;/code&gt; operation, our query returns results with a new column header, but merely a combination of contents - they all correspond to existing fields in our database.&lt;/p&gt;

&lt;p&gt;If we want to query for results that yield both a new header and new contents, we can take advantage of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CASE&lt;/code&gt; operation.&lt;/p&gt;

&lt;p&gt;For example, still working with our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;people&lt;/code&gt; table, say  we want to derive a column that tells us whether the person in question loves &lt;em&gt;Titanic&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We can’t really be sure that any of them don’t love &lt;em&gt;Titanic&lt;/em&gt;, but we feel comfortable predicting that they do love the film if their favorite actor is Leonardo DiCaprio and their favorite actress is Kate Winslet.&lt;/p&gt;

&lt;p&gt;Using that criteria, we can put together our query like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;CASE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;favorite_actor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Leonardo DiCaprio'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;favorite_actress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Kate Winslet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Yes'&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Unsure'&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loves_titanic&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since Sally was the only person in our table that matched the criteria, she will be the only person designated with a ‘Yes’ in our new column.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;name&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;loves_titanic&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Bob&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Unsure&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Jane&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Unsure&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Sally&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Here, our query returns results without a 1-to-1 mapping to our database. By including a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CASE&lt;/code&gt; operation that behaves differently depending on the contents of existing fields in our database, we’re able to derive new information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We haven’t come close to exhausting the range of techniques you can use to derive new and sophisticated information from tables in a database, much less other information that you’ll want to possess to accomplish other tasks, but we have covered some important ground.&lt;/p&gt;

&lt;p&gt;If you’re in an environment where you’re likely to find yourself working with a relational database, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UNION&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CASE&lt;/code&gt; operations are two techniques with which you’ll want to be familiar.&lt;/p&gt;

</description>
        <pubDate>Fri, 16 Oct 2015 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io/sql/2015/10/16/sql-union-case.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io/sql/2015/10/16/sql-union-case.html</guid>
        
        <category>union</category>
        
        <category>case</category>
        
        
        <category>sql</category>
        
      </item>
    
      <item>
        <title>Undoing An Erroneous Force Push: The Git Reflog</title>
        <description>&lt;p&gt;Recently, I’ve been working on a project maintained by multiple developers. There are a decent number of pull requests hanging around, and a lot of work happening at all times. One of my roles has been to prepare open pull requests for a clean and easy merge.&lt;/p&gt;

&lt;p&gt;Not too tricky of a task, most of the time. Rebase the branch onto master, resolve all the conflicts, push up the changes, and it’s good to go.&lt;/p&gt;

&lt;p&gt;Unless you mess up the rebase, incorrectly resolving merge conflicts. Running the tests will save you most of the time, but not always. And if you get too far, you may have just force pushed a broken branch onto the PR. Oops.&lt;/p&gt;

&lt;p&gt;Luckily, this sort of error is not the end of the world. Not at all.&lt;/p&gt;

&lt;p&gt;There are number of ways to deal with inadvertent force pushes; I’d recommend &lt;a href=&quot;https://blog.8thlight.com/sandro-padin/2015/06/08/help-i-just-force-pushed-to-master.html&quot;&gt;this blog post&lt;/a&gt; if you haven’t come across it already. But in this case, a very simple solution is to take advantage of &lt;a href=&quot;https://git-scm.com/docs/git-reflog&quot;&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reflog&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you’re in your project’s directory and you type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reflog&lt;/code&gt; on the command line, you’ll see a history of actions you’ve taken within the project: moving between branches, making commits, etc.&lt;/p&gt;

&lt;p&gt;If you pinpoint the &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection&quot;&gt;SHA&lt;/a&gt; corresponding to the place where everything went awry (e.g. the place right before where you began the faulty rebase), you can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout&lt;/code&gt; that SHA and begin again. Or just breathe a sigh of relief as you push it up un-catastrophically-rebased.&lt;/p&gt;

</description>
        <pubDate>Wed, 07 Oct 2015 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io/general/2015/10/07/git-reflog.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io/general/2015/10/07/git-reflog.html</guid>
        
        <category>git</category>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Backbone + React: Render Components With `Render`</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;tl;dr - Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React.render()&lt;/code&gt; in place of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React.renderComponent()&lt;/code&gt; when rendering React components from Backbone views&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you’re looking to start bringing React into a project you’ve set up in Backbone, you’re in luck. It can be done. There are even some nice posts out there to help get you started.&lt;/p&gt;

&lt;p&gt;Say you want to start bringing React components into your Backbone views. Thomas Boyt &lt;a href=&quot;https://venmo-blog.squarespace.com/2015/6/4/using-react-components-as-backbone-views&quot;&gt;has you covered&lt;/a&gt;. Looking to get more parts of each library talking to each other? Check out &lt;a href=&quot;https://blog.engineyard.com/2015/integrating-react-with-backbone&quot;&gt;Ben Lewis’ post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The wealth of information is a gift, and a testament to the software community’s willingness to share information to help make solving common problems a little bit easier.&lt;/p&gt;

&lt;p&gt;Unfortunately, it can be tough for the literature to keep up with changing APIs. Techniques that got the job done only a year ago (or less) might no longer be supported today.&lt;/p&gt;

&lt;p&gt;This isn’t a huge problem; it’s better to have slightly dated information than to have nothing at all.&lt;/p&gt;

&lt;p&gt;But if you’re new to both libraries, trying to make React and Backbone play nicely with each other can be challenging enough. Adding on the obstacle of non-working sample code can make the solution seem out of reach.&lt;/p&gt;

&lt;p&gt;So, in this post, I want to highlight one place where the API has changed, and what you can do to keep making progress.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Goodbye &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;renderComponent()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Both of the posts linked to above render React components from Backbone views with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React.renderComponent()&lt;/code&gt;. This function takes two arguments: the component to render and the DOM element that it should occupy.&lt;/p&gt;

&lt;p&gt;The trouble is, that function &lt;a href=&quot;https://facebook.github.io/react/blog/2014/10/28/react-v0.12.html&quot;&gt;is now deprecated&lt;/a&gt;. If you give it a try with a recent version of React, you’ll be met with an unwelcome surprise in the console: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Uncaught TypeError: React.renderComponent is not a function&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you read through the documentation, you’ll see that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React.renderComponent()&lt;/code&gt; has been replaced by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React.render()&lt;/code&gt;. And that’s the replacement you should use (see the “tl;dr”), but there are reasons you might be tempted to not do so.&lt;/p&gt;

&lt;p&gt;Just like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React.renderComponent()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React.render()&lt;/code&gt; requires that you pass in a DOM element identifying where on the page your component should be rendered. When the component is rendered to that DOM element, it replaces the existing contents of that container.&lt;/p&gt;

&lt;p&gt;This means that rendering your React component can delete existing page contents. When you’re displaying something like a modal, that can be a real pain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So Many Renders&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Taking a look through the documentation, you can see that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React.render()&lt;/code&gt; is supplemented by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React.renderToString()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React.renderToStaticMarkup()&lt;/code&gt;. These functions have the advantage of only taking one argument: the component you want to render.&lt;/p&gt;

&lt;p&gt;The benefit of not taking control of a DOM element is that you don’t have to cede control of that container over to React. Simply generate the contents you want to display, then add or remove them at will with jQuery; it creates no problems for your existing content.&lt;/p&gt;

&lt;p&gt;However, such static markup does not have access to functions that you’ve defined on your components. When it comes time to handle events, you can lose a lot of the benefits that React provides, as you start micromanaging every event from your top-level Backbone view.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Render Under Control&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order to access functions defined on your React components, you’ll want to stick with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React.render()&lt;/code&gt;, handing over control of the DOM element. That’s the most simple way to get your content on the page while also taking advantage of React’s event handling.&lt;/p&gt;

&lt;p&gt;If you’re worried about losing existing content, a simple solution is to append a new DOM element where you want the component to render, passing that in as the container.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parentEl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;div class='component-container'&amp;gt;&amp;lt;/div&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;prop1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;prop2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'.component-container'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Make sure that you unmount the component when it’s closed:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unmountComponentAtNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'.component-container'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And you’ve successfully taken advantage of React’s event handling inside of your Backbone view.&lt;/p&gt;

</description>
        <pubDate>Mon, 14 Sep 2015 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io/javascript/2015/09/14/backbone-react-render.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io/javascript/2015/09/14/backbone-react-render.html</guid>
        
        <category>react</category>
        
        <category>backbone</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Program Like a Debater: Character, Commitment, Team Work, Hard Work</title>
        <description>&lt;p&gt;During my time as a debater, I had the privilege of working under the greatest coach in the history of college debate: &lt;a href=&quot;http://articles.chicagotribune.com/2009-12-29/news/0912280347_1_mr-deatherage-debate-community-students&quot;&gt;Larry Scott Deatherage&lt;/a&gt;. Most of us who knew him referred to him affectionately as ‘the Duck.’&lt;/p&gt;

&lt;p&gt;Duck coached 7 national champions in 12 years. Across his tenure, he personally led Northwestern to more national championships than any other &lt;em&gt;program&lt;/em&gt; in the history of college debate - Harvard, Dartmouth, Berkeley, you name it.&lt;/p&gt;

&lt;p&gt;He instilled in me the mantra from the title: character, commitment, team work, and hard work. It was a set of principles he referred to often; a collection of foundational building blocks upon which success in debate is built.&lt;/p&gt;

&lt;p&gt;As I’ve been growing as a software developer, I’ve been keeping an eye open toward figuring out what sorts of principles underlie success in this discipline. I’ve pursued the topic in conversations with colleagues, and checked for clues in the books that I read.&lt;/p&gt;

&lt;p&gt;As I was reading &lt;a href=&quot;http://www.amazon.com/Peopleware-Productive-Projects-Second-Edition/dp/0932633439&quot;&gt;&lt;em&gt;Peopleware&lt;/em&gt;&lt;/a&gt;, I came across a really interesting passage:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The best organizations are not of a kind; they are more notable for their dissimilarities than for their likenesses. But one thing that they all share is a preoccupation with being the best. It is a constant topic in the corridors, in working meetings, and in bull sessions. The converse of this effect is equally true: In organizations that are not “the best,” the topic is rarely or never discussed.&lt;/p&gt;

  &lt;p&gt;The best organizations are consciously striving to be best. This is a common goal that provides common direction, joint satisfaction, and a strong binding effect. There is a mentality of permanence about such places, the sense that you’d be dumb to look for a job elsewhere — people would look at you as though you were daft. (122)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And then it hit me. Character, commitment, team work, and hard work aren’t just building blocks for success in debate. They’re building blocks for success in &lt;em&gt;anything&lt;/em&gt;. Duck was so big on preaching these lessons because they’re not just about debate; they’re about life.&lt;/p&gt;

&lt;p&gt;I always knew this on some gut level. Of course success in any discipline is going to require that you show character, commit to your goals, work effectively with those around you, and give it your all. But the thing that brings it all together is the motivation that &lt;em&gt;Peopleware&lt;/em&gt; finds in successful software teams: being preoccupied with being the best.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be The Best&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After I finished debating, I went on to coach myself. I’m no Duck, not even close, but I did have the privilege of working with national champions at both the high school and college levels.&lt;/p&gt;

&lt;p&gt;When I look back on those teams, and think about how they reached that pinnacle, I see the exact same principles that the Duck talked about. I think back to how it felt to work with those folks, and one thing is obvious: they were preoccupied with being the best.&lt;/p&gt;

&lt;p&gt;Being preoccupied with being the best manifests itself in all sorts of little ways. You show up a little bit earlier than you need to, leave a little bit late. You poke around beyond the materials you know that you need to master, just to have an edge when it’s time for something new. It’s not reducible to just one thing.&lt;/p&gt;

&lt;p&gt;But you can definitely tell the difference between the teams that are preoccupied with being the best and those that aren’t. It’s transparent in the way they carry themselves. Some do just enough to get by, and others do noticeably more.&lt;/p&gt;

&lt;p&gt;It’s ok to not be preoccupied with being the best. Sometimes you’re just doing something as a hobby, and sometimes you have other priorities. That’s perfectly understandable.&lt;/p&gt;

&lt;p&gt;But when you decide to devote a chunk of every day to one activity, it makes sense to take that extra step - to make it your goal to be the best that you can be.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Continual Improvement&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To say that Duck was preoccupied with being the best certainly isn’t false, but it also risks a miscommunication - as if to say that he had no mental bandwidth to deal with those for whom singular dominance of the field seemed out of reach.&lt;/p&gt;

&lt;p&gt;But that’s certainly not true. I showed up in Duck’s office as a freshman having tallied one win and six losses at the national championship in high school. I wasn’t exactly a star recruit. And my freshman class certainly wasn’t lacking for those who were.&lt;/p&gt;

&lt;p&gt;But Duck gave me an opportunity anyway, giving me challenging assignments just like anyone else and sending me to major tournaments. In doing so, he delivered another of his famous mantras. “Your goal,” he said, “is simply this: to be debating better at the end of the year than you were at the beginning of the year.”&lt;/p&gt;

&lt;p&gt;He also said this: “When one of us wins, we all win. When one of us loses, we all lose.” A team that’s preoccupied with being the best isn’t closed off to those who have room to grow. On the contrary, it puts folks of various skill sets in collaboration with one another, fostering shared learning and growth.&lt;/p&gt;

&lt;p&gt;Suffice it to say that I was &lt;em&gt;far&lt;/em&gt; more successful in college than I had been in high school. Setting your sights on continual improvement and buying into the shared excellence of a team makes you part of a whole that’s greater than the sum of its parts, and it enables you to flourish in ways that might not have seemed possible before.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Software Craftsmanship&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As I’ve been growing out of debate and into software development, one thing that’s been heartening for me is the discovery that these principles and mantras aren’t just &lt;em&gt;relevant to&lt;/em&gt; my new field - they’re actively practiced and endorsed, at least by some folks.&lt;/p&gt;

&lt;p&gt;In the contexts I’ve explored, they go by the name of software craftsmanship.&lt;/p&gt;

&lt;p&gt;Software craftsmanship embodies a commitment to doing a little bit more than you would need to do just to get by. It invests in the belief that doing so isn’t just some sort of icing on the cake, but rather the crucial ingredient.&lt;/p&gt;

&lt;p&gt;Not everyone who does software development is committed to the principles of software craftsmanship. Some are more interested in shipping code as fast and effortlessly as possible. That’s fine.&lt;/p&gt;

&lt;p&gt;But it’s not the sort of attitude that engenders excellence. As Aristotle put it, “We are what we repeatedly do. Excellence, then, is not an act, but a habit.”&lt;/p&gt;

&lt;p&gt;Whether in debate, software, or some other field entirely, character, commitment, team work, and hard work are the habits of excellence. They’re what make a great programmer, a robust programming environment, and a strong team.&lt;/p&gt;

</description>
        <pubDate>Tue, 25 Aug 2015 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io/general/2015/08/25/character-commitment-team-work-hard-work.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io/general/2015/08/25/character-commitment-team-work-hard-work.html</guid>
        
        <category>craftsmanship</category>
        
        <category>books</category>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Appreciating Open Data: Check Out Chicago Beaches</title>
        <description>&lt;p&gt;This past Tuesday, I attended my first &lt;a href=&quot;http://chihacknight.org/&quot;&gt;Chi Hack Night&lt;/a&gt;. It was a really cool experience. The event brings together folks from a broad variety of different backgrounds (not just developers) to work toward making a social impact.&lt;/p&gt;

&lt;p&gt;Many things about the group are impressive: the kind of work they do and have done, the talent and motivation of the participants, and their welcoming attitude toward newcomers. The folks who organize and contribute to Chi Hack Night are absolutely awesome.&lt;/p&gt;

&lt;p&gt;But, beyond the group itself, the tools they use to are impressive as well. In trying to help people visualize and grapple with what’s going on in their community, the folks at Chi Hack Night are aided by access to &lt;a href=&quot;https://data.cityofchicago.org/&quot;&gt;a tremendous amount of data&lt;/a&gt; provided by the city of Chicago.&lt;/p&gt;

&lt;p&gt;I hope to go back to Chi Hack Night, and to contribute to some their projects. But, for now, I was also interested in exploring what all of this data looks like, and what I can do with it.&lt;/p&gt;

&lt;p&gt;So, I started poking around, and I came across &lt;a href=&quot;https://data.cityofchicago.org/Parks-Recreation/Beach-Water-Quality-Automated-Sensors/qmqz-2xku&quot;&gt;a set of data&lt;/a&gt; that provides hourly readings from sensors along Lake Michigan that measure the water quality at those locations.&lt;/p&gt;

&lt;p&gt;I decided to make &lt;a href=&quot;http://rmulhol.github.io/chicago-beaches/&quot;&gt;a little site&lt;/a&gt;, where you can go to check out the latest readings - decide whether or not today would be a good day to hit up the beach in Chicago, or if it’d be best to stay out of the water.&lt;/p&gt;

&lt;p&gt;The site isn’t groundbreaking, but it’s got a couple cool features:&lt;/p&gt;

&lt;p&gt;1) Static - the Chicago Beaches page is a static site. All API requests are made through the browser (thanks, Chicago, for supporting cross-origin resource sharing). This probably makes it pretty uninteresting if you’re browsing without JavaScript enabled and/or on an old browser, but it also means I get …&lt;/p&gt;

&lt;p&gt;2) Hosting - via GitHub pages. Just pushed up my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch, and the site was live within minutes. It’s amazing how easy it is to deploy a little React app with these kinds of tools.&lt;/p&gt;

&lt;p&gt;There’s a few more things I could imagine doing to improve this site, but I’m even more excited at the possibilities that lie ahead working with the tools I’ve used.&lt;/p&gt;

&lt;p&gt;With a budding comfortability with React, huge amounts of data just waiting to be used, and simple static site hosting via GitHub pages, there’s a lot of cool things that lie within reach.&lt;/p&gt;

</description>
        <pubDate>Thu, 20 Aug 2015 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io/general/2015/08/20/chicago-beaches-data.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io/general/2015/08/20/chicago-beaches-data.html</guid>
        
        <category>react</category>
        
        <category>github</category>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Working With APIs: Rolling a Proxy Server</title>
        <description>&lt;p&gt;In &lt;a href=&quot;/javascript/2015/08/11/cross-origin-resource-sharing.html&quot;&gt;yesterday’s post&lt;/a&gt;, we talked about the difficulties one can encounter when making AJAX requests to an API that doesn’t support cross-origin resource sharing (CORS). Unless the response includes the required &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access-Control-Allow-Origin&lt;/code&gt; header, you’ll be getting an error message in the console - and not much else.&lt;/p&gt;

&lt;p&gt;One way to get around this is to write your own proxy server. Instead of waiting for your API’s maintainers to implement support for CORS, simply fetch the content with your own proxy and pass it along with the required header tacked on.&lt;/p&gt;

&lt;p&gt;If you were going to do this in production, you’d have a number of concerns outside of that core functionality - hosting, authentication, etc. But in development, you can cut away a lot of that overhead. Implementing a proxy server in Node is quick and easy.&lt;/p&gt;

&lt;p&gt;Say we’re putting together a little app to display and generate memes. One good option for doing so is &lt;a href=&quot;https://api.imgflip.com/&quot;&gt;Imgflip&lt;/a&gt;. They support fetching popular memes and adding captions on demand. Good stuff.&lt;/p&gt;

&lt;p&gt;They also don’t support CORS. Try to hit the API with AJAX, and you’ll see the familiar error message.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;XMLHttpRequest cannot load https://api.imgflip.com/get_memes. No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘http://localhost:8080’ is therefore not allowed access.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you wanted to hit it by proxy, say at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:3000/get_memes&lt;/code&gt;, you could do so with this script:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;proxyImgflip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proxyImgflip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Serving up &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proxyRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;api.imgflip.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proxyResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;proxyRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;proxyResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Listening on 3000&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Assuming you’ve got Node installed, you can run this script with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node &amp;lt;filename.js&amp;gt;&lt;/code&gt;, and you’re good to go. To access &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://api.imgflip.com/get_memes&lt;/code&gt; in a cross-domain request, you could just hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:3000/get_memes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;How does it work?&lt;/p&gt;

&lt;p&gt;We use Node’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;/code&gt; API to create a server, passing in a callback and setting it to listen on port 3000.&lt;/p&gt;

&lt;p&gt;Within the callback, we log the request, affix the required header to our response, and pass along the incoming request to Imgflip’s API, piping the data we get back into our response.&lt;/p&gt;

&lt;p&gt;It’s only a development-caliber solution, but it delivers major payoff given how little effort is involved. If you’re looking to develop a client-side application to work with an API that doesn’t support CORS, you can get most of the way there with a simple Node script.&lt;/p&gt;

</description>
        <pubDate>Wed, 12 Aug 2015 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io/javascript/2015/08/12/api-proxy-server.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io/javascript/2015/08/12/api-proxy-server.html</guid>
        
        <category>node</category>
        
        <category>cors</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Working With APIs: On Cross-Origin Resource Sharing</title>
        <description>&lt;p&gt;If you’re working with an API, one thing that you might want to do is use &lt;a href=&quot;https://en.wikipedia.org/wiki/Ajax_(programming)&quot;&gt;AJAX&lt;/a&gt; to make requests from the browser. Unfortunately, unless the API provides the required response headers, you might run into some hiccups along the way.&lt;/p&gt;

&lt;p&gt;If you fire a request from the browser at an API that doesn’t support &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&quot;&gt;Cross-Origin Resource Sharing (CORS)&lt;/a&gt;, you’ll get something resembling the following error message in the console:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;XMLHttpRequest cannot load https://api.you.want.to.hit.com/get_data. No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘http://localhost:8080’ is therefore not allowed access.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, what’s going on here? And how do we solve the problem?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is CORS?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The reason you’re seeing this error message is that you’re trying to launch a cross-domain request from the browser. That is, you’re asking the browser to make a request to a URL with a different protocol, host, and/or port number from that of the originating request. This violates &lt;a href=&quot;https://en.wikipedia.org/wiki/Same-origin_policy&quot;&gt;the same-origin policy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Basically, the browser will rubber stamp requests if the source and the target share the same origin. But if you’re interacting with an API, that’s likely not the case.&lt;/p&gt;

&lt;p&gt;That doesn’t mean that cross-domain requests are off limits. But to carry them out, you need to satisfy a few conditions.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/cors/&quot;&gt;this page&lt;/a&gt; for a much more thorough exploration of CORS and its implications for both the client and the server, but for now the most important thing to know is this: in order for a cross-origin request to succeed, the server needs to include an ‘Access-Control-Allow-Origin’ header, and that header needs to authorize the requesting URL (either specifically or via a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'*'&lt;/code&gt; value).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cool, but I don’t control the API’s response headers…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Right. You’re probably not in a position to assure that your API supports the required response headers.&lt;/p&gt;

&lt;p&gt;At this point, you have a few options.&lt;/p&gt;

&lt;p&gt;The first is to get in touch with people who host the API and request that they support cross-origin requests. It may be ignored or take awhile, but it’s a path of least resistance that they have little reason to turn down beyond not having the time (an admittedly fair obstacle).&lt;/p&gt;

&lt;p&gt;The second is to roll your own proxy server. Even if you can’t get the API host to support cross-origin requests, you can make your own server that does - and then use it to hit the target API outside of the browser.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;The third is to take advantage of other services that do the work for you. &lt;a href=&quot;https://jsonp.afeld.me/&quot;&gt;This site&lt;/a&gt;, for example, will act as a proxy server for you, without any coding on your behalf. Simply append the target url to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://jsonp.afeld.me/?url=&lt;/code&gt;, and the CORS request will succeed.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That’s pretty easy…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Indeed, it’s not very difficult to get around the barriers to cross-origin requests. The main question is simply how much work you’re willing/need to do given your use case.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;A &lt;a href=&quot;http://edgeguides.rubyonrails.org/api_app.html&quot;&gt;Rails API&lt;/a&gt; could do the trick. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;One thing to note about this solution is that it creates some security concerns. Since you’ll be passing your data through a proxy you don’t control, you’ll probably want to exercise discretion concerning what sort of information you pass through. The proxy could intercept (a) sensitive data from the API, or (b) private API keys in the URL (which could be a &lt;a href=&quot;https://rosspenman.com/api-key-exposure/&quot;&gt;major problem&lt;/a&gt;). &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 11 Aug 2015 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io/javascript/2015/08/11/cross-origin-resource-sharing.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io/javascript/2015/08/11/cross-origin-resource-sharing.html</guid>
        
        <category>ajax</category>
        
        <category>cors</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Doing More Stuff More Easily: Implementing the Open-Closed Principle in Server Architecture</title>
        <description>&lt;p&gt;As you may have deduced from &lt;a href=&quot;/java/2015/06/06/simple-java-server.html&quot;&gt;several&lt;/a&gt; &lt;a href=&quot;/java/2015/06/17/handler-adapter-architecture.html&quot;&gt;previous&lt;/a&gt; &lt;a href=&quot;/java/2015/06/19/java-logging-utility.html&quot;&gt;posts&lt;/a&gt;, I’ve been spending some of my time working on an HTTP server. It’s raised some really interesting challenges on numerous fronts, but one that really got me thinking had to do with figuring out the proper mechanism for routing requests.&lt;/p&gt;

&lt;p&gt;It didn’t seem like a particularly big deal when I only had to deal with a few simple requests, since I could just figure everything out with a conditional:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RootResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/file&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FourOhFourResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This seems to work OK with a small amount of relatively simple requests, but you’re probably already starting to notice the issue: what about when things get more complicated? Say I’ve got to deal with 100 different requests, sometimes checking things in the header (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request.isAuthorized()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request.hasRange()&lt;/code&gt;, etc.). That conditional is going to get pretty nasty.&lt;/p&gt;

&lt;p&gt;And, conveniently, this problem even has a name: it’s an illustration of what happens when you violate the Open-Closed Principle. That is to say, this approach is not open for extension but closed for modification. Every new request is going to require that you go in an edit that conditional.&lt;/p&gt;

&lt;p&gt;But is there another way? Perhaps server architects have just been toiling away in this sort of mess for years, carrying out such a herculean task that we ought stand in awe of their dedication and resilience.&lt;/p&gt;

&lt;p&gt;Of course there’s another way. Anyone who’s got a passing familiarity with Rails should know as much. Does this look familiar?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;                  &lt;span class=&quot;s2&quot;&gt;&quot;static_pages#home&quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;     &lt;span class=&quot;s2&quot;&gt;&quot;help&quot;&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;static_pages#help&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;     &lt;span class=&quot;s2&quot;&gt;&quot;about&quot;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;static_pages#about&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;     &lt;span class=&quot;s2&quot;&gt;&quot;contact&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;static_pages#contact&quot;&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s the beginning of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/routes.rb&lt;/code&gt; file from Michael Hartl’s &lt;a href=&quot;https://www.railstutorial.org/&quot;&gt;Rails Tutorial&lt;/a&gt;, and it’s accomplishing precisely the task we’ve set out to tackle. It’s also pretty straightforward and elegant - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; request maps to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; controller action.&lt;/p&gt;

&lt;p&gt;That’s a pretty important verb: “map”. It’s also a data structure. In Java, we might think about a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HashMap&lt;/code&gt;, where keys could be requests corresponding to values that designate appropriate controllers.&lt;/p&gt;

&lt;p&gt;In retrospect, it’s got this sort of facepalm-eliciting simplicity: associate routes with controllers in a map, then make calls to that map whenever you need to route a request.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Routes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;Routes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;routes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addRoute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRoute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, this is a fairly naive implementation that could be finessed a bit, but it’s the seedling for an extensible architecture that satisfies the Open-Closed principle, and it makes your life a lot easier when you want to add new routes to your server down the line.&lt;/p&gt;

</description>
        <pubDate>Tue, 04 Aug 2015 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io/java/2015/08/04/ocp-server-router.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io/java/2015/08/04/ocp-server-router.html</guid>
        
        <category>server</category>
        
        <category>router</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Getting Started With React - Part 3: The Flux Architecture</title>
        <description>&lt;p&gt;So we’ve got some sense about how we can work with React components to generate some nice looking views, and even how we can change them up in response to user input. Pretty nifty.&lt;/p&gt;

&lt;p&gt;But what if we want to initiate more broad sweeping changes across numerous components? Or if we want to react to larger chunks of data from an API call? We might figure out a way to do so with what we already have, but our code could get pretty not-so-clean pretty quickly.&lt;/p&gt;

&lt;p&gt;Luckily, there’s no need to indulge such indiscretions, thanks to &lt;a href=&quot;https://facebook.github.io/flux/docs/overview.html&quot;&gt;the Flux architecture&lt;/a&gt;. Flux is a pattern for implementing a unidirectional data flow, one that makes it simple to implement significant and far-reaching changes to our views reliably and efficiently.&lt;/p&gt;

&lt;p&gt;To get a sense for what we can do with the Flux architecture, we’re going to take a run at fitting it into our demo app. Since Flux is a pattern rather than a framework, we’ll be looking at &lt;em&gt;a&lt;/em&gt; way to implement it rather than &lt;em&gt;the&lt;/em&gt; way, but we’ll end up with a nice foundation for implementing further changes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before We Begin: Overview&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you’ve just starting to follow along with this post, you can catch up with the progress we’ve made so far by checking out the third commit of &lt;a href=&quot;https://github.com/rmulhol/demo-react-app&quot;&gt;the demo react app Github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you’re up to date, you’ll want to install Flux by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install --save flux&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Adding Flux to our project’s dependencies gives us access to the dispatcher, an important tool in the unidirectional data flow that characterizes the Flux architecture. The dispatcher mediates between the actions that are fired by components and the stores that update components.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rmulhol.github.io/assets/flux-architecture.png&quot; alt=&quot;flux-architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this post, we’ll be implementing the Flux architecture to duplicate our app’s existing behavior. Though we won’t be adding any new features for the user, we’ll be tidying up the backend so as to lay the groundwork for future additions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Add a Dispatcher&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first thing we’ll want to do is create a dispatcher. It can live at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js/dispatcher/dispatcher.js&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/7fe46f4f9cea3780eacf.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;With this in place, we’ll be able to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;require&lt;/code&gt; and call the dispatcher from other parts of our application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Create an Action&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After we’ve got a dispatcher, we’ll want to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;require&lt;/code&gt; and use it in a file designated to contain our actions. Create the following file at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js/actions/demo_app_actions.js&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/73355cb3dca6fd138fd8.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Here, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toggleLogo()&lt;/code&gt; method uses the dispatcher to broadcast a payload to the rest of our application. In this case, the payload includes keys for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;actionType&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;showReactLogo&lt;/code&gt;, which correspond to a string and a boolean, respectively.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Note  the bang (!) before &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;showReactLogo&lt;/code&gt;, which means we’re dispatching a value for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;showReactLogo&lt;/code&gt; that reflects the opposite of whatever’s passed in. As will become more clear shortly, this is an example of handling state manipulation in the actions rather than the components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Open a Store&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once we’ve got actions that invoke the dispatcher to issue payloads to our application, we’ll want to register some callbacks with the dispatcher to handle those payloads. We do this on a store, which we’ll put at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js/stores/demo_app_store.js&lt;/code&gt;.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/9e236715490835053a8c.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Let’s unpack what’s going on here.&lt;/p&gt;

&lt;p&gt;In addition to the dispatcher, we’re requiring the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventEmitter&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utils&lt;/code&gt; package from Node.js, which will enable us to inherit features that allow us to run callbacks and handle dispatched payloads.&lt;/p&gt;

&lt;p&gt;We’ve also got an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addLogoListener()&lt;/code&gt; method that registers a callback to be invoked whenever a “toggle-logo” event is emitted. We’ll use it in our component to complete state modifications initiated by the actions.&lt;/p&gt;

&lt;p&gt;Finally, we’ve got a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dispatchToken()&lt;/code&gt; method that contains a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; statement.&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; The only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case&lt;/code&gt; we’ve included so far corresponds to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;actionType&lt;/code&gt; of our only action (“toggle-logo”), and it emits an event of that type storing the value that corresponds to the payload’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;showReactLogo&lt;/code&gt; key.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Refactor - add Constants&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At this point, a lot of the behavior we’ve implemented depends on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;actionType&lt;/code&gt; “toggle-logo”, and we’ve duplicated that string at several places in our code. It would be shame if something went wrong because of a typo in one of those places.&lt;/p&gt;

&lt;p&gt;For this reason, it can be helpful to keep track of certain constants in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js/constants/constants.js&lt;/code&gt; file. We’ll be using this file to store values for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;actionType&lt;/code&gt; of dispatched payloads right now, but we could also put any other important constants here as we go.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/66eaec512c7a94252a27.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;With this in place, we can change how we refer to the “toggle-logo” value for our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;actionType&lt;/code&gt; key in our action:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/7190e9eff411565edb29.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;And in our store:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/908f2256eb04baba12b3.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;It’s only a minor detour but, like much of what we’re doing in this post, it will make life easier down the line.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5: Edit Components&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that stores are emitting events that carry values from our actions’ payloads, we can add listeners on our components to initiate change in response to emitted events. This is the logic that replaces the existing state transitions on our components.&lt;/p&gt;

&lt;p&gt;The revised &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js/components/body.js&lt;/code&gt; file should be modified to look like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/a34fdef63bc0e79d9731.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The important changes we’ve made here are twofold:&lt;/p&gt;

&lt;p&gt;1) We’ve added a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;componentDidMount()&lt;/code&gt; method, which will be invoked automatically after the component renders, to register a callback via our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addLogoListener()&lt;/code&gt; method from the store. That callback alters the component’s state to correspond to the emitted value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;showReactLogo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;2) We’ve updated our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toggleImage()&lt;/code&gt; method to fire an action instead of directly setting state on the component. No longer is our component manipulating state directly; instead, it passes much of that work off to the action, dispatcher, and store.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wrap Up&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At this point, our app is working exactly the same as it did at the beginning of the post. Exciting!&lt;/p&gt;

&lt;p&gt;In all seriousness, though, we’ve just laid down an implementation of the Flux architecture which sets us up to make further changes with the reliability of unidirectional data flow at our backs. In future posts, we’ll take a look at some of the cool things we can accomplish with that in place.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;For a more comprehensive description of the Flux architecture, check out &lt;a href=&quot;https://www.npmjs.com/package/flux&quot;&gt;the npm page for the Flux package&lt;/a&gt;. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;In subsequent posts, we’ll discuss how to pass and use more sophisticated data, like JSON data from an API call. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;It might feel a little redundant to be creating directories each time we’re adding a file here, and that’s fair. But dividing up our application into separate directories for components, actions, stores, and so forth initiates a nice organizational structure we’ll appreciate if and when we start accumulating more files of each type. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;We’ve called this method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dispatchToken()&lt;/code&gt; because it returns a token that we can use for controlling the order of execution of registered callbacks, but it’s also worth noting that this method is doing much more than that. &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 27 Jul 2015 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io/javascript/2015/07/27/react-flux-architecture.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io/javascript/2015/07/27/react-flux-architecture.html</guid>
        
        <category>react</category>
        
        <category>flux</category>
        
        
        <category>javascript</category>
        
      </item>
    
  </channel>
</rss>
