<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rob Learns Programming</title>
    <description>Notes from a journey on the path toward becoming proficient in computer programming.
</description>
    <link>http://rmulhol.github.io//</link>
    <atom:link href="http://rmulhol.github.io//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 20 Aug 2015 14:42:42 -0500</pubDate>
    <lastBuildDate>Thu, 20 Aug 2015 14:42:42 -0500</lastBuildDate>
    <generator>Jekyll v2.3.0</generator>
    
      <item>
        <title>Appreciating Open Data: Check Out Chicago Beaches</title>
        <description>&lt;p&gt;This past Tuesday, I attended my first &lt;a href=&quot;http://chihacknight.org/&quot;&gt;Chi Hack Night&lt;/a&gt;. It was a really cool experience. The event brings together folks from a broad variety of different backgrounds (not just developers) to work toward making a social impact.&lt;/p&gt;

&lt;p&gt;Many things about the group are impressive: the kind of work they do and have done, the talent and motivation of the participants, and their welcoming attitude toward newcomers. The folks who organize and contribute to Chi Hack Night are absolutely awesome.&lt;/p&gt;

&lt;p&gt;But, beyond the group itself, the tools they use to are impressive as well. In trying to help people visualize and grapple with what’s going on in their community, the folks at Chi Hack Night are aided by access to &lt;a href=&quot;https://data.cityofchicago.org/&quot;&gt;a tremendous amount of data&lt;/a&gt; provided by the city of Chicago.&lt;/p&gt;

&lt;p&gt;I hope to go back to Chi Hack Night, and to contribute to some their projects. But, for now, I was also interested in exploring what all of this data looks like, and what I can do with it.&lt;/p&gt;

&lt;p&gt;So, I started poking around, and I came across &lt;a href=&quot;https://data.cityofchicago.org/Parks-Recreation/Beach-Water-Quality-Automated-Sensors/qmqz-2xku&quot;&gt;a set of data&lt;/a&gt; that provides hourly readings from sensors along Lake Michigan that measure the water quality at those locations.&lt;/p&gt;

&lt;p&gt;I decided to make &lt;a href=&quot;http://rmulhol.github.io/chicago-beaches/&quot;&gt;a little site&lt;/a&gt;, where you can go to check out the latest readings - decide whether or not today would be a good day to hit up the beach in Chicago, or if it’d be best to stay out of the water.&lt;/p&gt;

&lt;p&gt;The site isn’t groundbreaking, but it’s got a couple cool features:&lt;/p&gt;

&lt;p&gt;1) Static - the Chicago Beaches page is a static site. All API requests are made through the browser (thanks, Chicago, for supporting cross-origin resource sharing). This probably makes it pretty uninteresting if you’re browsing without JavaScript enabled and/or on an old browser, but it also means I get …&lt;/p&gt;

&lt;p&gt;2) Hosting - via GitHub pages. Just pushed up my &lt;code&gt;gh-pages&lt;/code&gt; branch, and the site was live within minutes. It’s amazing how easy it is to deploy a little React app with these kinds of tools. &lt;/p&gt;

&lt;p&gt;There’s a few more things I could imagine doing to improve this site, but I’m even more excited at the possibilities that lie ahead working with the tools I’ve used. &lt;/p&gt;

&lt;p&gt;With a budding comfortability with React, huge amounts of data just waiting to be used, and simple static site hosting via GitHub pages, there’s a lot of cool things that lie within reach.&lt;/p&gt;

</description>
        <pubDate>Thu, 20 Aug 2015 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io//general/2015/08/20/chicago-beaches-data.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//general/2015/08/20/chicago-beaches-data.html</guid>
        
        <category>react</category>
        
        <category>github</category>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Working With APIs: Rolling a Proxy Server</title>
        <description>&lt;p&gt;In &lt;a href=&quot;/javascript/2015/08/11/cross-origin-resource-sharing.html&quot;&gt;yesterday’s post&lt;/a&gt;, we talked about the difficulties one can encounter when making AJAX requests to an API that doesn’t support cross-origin resource sharing (CORS). Unless the response includes the required &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; header, you’ll be getting an error message in the console - and not much else.&lt;/p&gt;

&lt;p&gt;One way to get around this is to write your own proxy server. Instead of waiting for your API’s maintainers to implement support for CORS, simply fetch the content with your own proxy and pass it along with the required header tacked on. &lt;/p&gt;

&lt;p&gt;If you were going to do this in production, you’d have a number of concerns outside of that core functionality - hosting, authentication, etc. But in development, you can cut away a lot of that overhead. Implementing a proxy server in Node is quick and easy.&lt;/p&gt;

&lt;p&gt;Say we’re putting together a little app to display and generate memes. One good option for doing so is &lt;a href=&quot;https://api.imgflip.com/&quot;&gt;Imgflip&lt;/a&gt;. They support fetching popular memes and adding captions on demand. Good stuff.&lt;/p&gt;

&lt;p&gt;They also don’t support CORS. Try to hit the API with AJAX, and you’ll see the familiar error message.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;XMLHttpRequest cannot load https://api.imgflip.com/get_memes. No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘http://localhost:8080’ is therefore not allowed access. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you wanted to hit it by proxy, say at &lt;code&gt;localhost:3000/get_memes&lt;/code&gt;, you could do so with this script:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;proxyImgflip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proxyImgflip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Serving up &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Access-Control-Allow-Origin&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proxyRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;api.imgflip.com&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proxyResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;proxyRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;proxyResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Listening on 3000&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Assuming you’ve got Node installed, you can run this script with &lt;code&gt;node &amp;lt;filename.js&amp;gt;&lt;/code&gt;, and you’re good to go. To access &lt;code&gt;https://api.imgflip.com/get_memes&lt;/code&gt; in a cross-domain request, you could just hit &lt;code&gt;http://localhost:3000/get_memes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;How does it work? &lt;/p&gt;

&lt;p&gt;We use Node’s &lt;code&gt;http&lt;/code&gt; API to create a server, passing in a callback and setting it to listen on port 3000. &lt;/p&gt;

&lt;p&gt;Within the callback, we log the request, affix the required header to our response, and pass along the incoming request to Imgflip’s API, piping the data we get back into our response.&lt;/p&gt;

&lt;p&gt;It’s only a development-caliber solution, but it delivers major payoff given how little effort is involved. If you’re looking to develop a client-side application to work with an API that doesn’t support CORS, you can get most of the way there with a simple Node script.&lt;/p&gt;

</description>
        <pubDate>Wed, 12 Aug 2015 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io//javascript/2015/08/12/api-proxy-server.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//javascript/2015/08/12/api-proxy-server.html</guid>
        
        <category>node</category>
        
        <category>cors</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Working With APIs: On Cross-Origin Resource Sharing</title>
        <description>&lt;p&gt;If you’re working with an API, one thing that you might want to do is use &lt;a href=&quot;https://en.wikipedia.org/wiki/Ajax_(programming)&quot;&gt;AJAX&lt;/a&gt; to make requests from the browser. Unfortunately, unless the API provides the required response headers, you might run into some hiccups along the way.&lt;/p&gt;

&lt;p&gt;If you fire a request from the browser at an API that doesn’t support &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&quot;&gt;Cross-Origin Resource Sharing (CORS)&lt;/a&gt;, you’ll get something resembling the following error message in the console:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;XMLHttpRequest cannot load https://api.you.want.to.hit.com/get_data. No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘http://localhost:8080’ is therefore not allowed access.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, what’s going on here? And how do we solve the problem?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is CORS?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The reason you’re seeing this error message is that you’re trying to launch a cross-domain request from the browser. That is, you’re asking the browser to make a request to a URL with a different protocol, host, and/or port number from that of the originating request. This violates &lt;a href=&quot;https://en.wikipedia.org/wiki/Same-origin_policy&quot;&gt;the same-origin policy&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Basically, the browser will rubber stamp requests if the source and the target share the same origin. But if you’re interacting with an API, that’s likely not the case.&lt;/p&gt;

&lt;p&gt;That doesn’t mean that cross-domain requests are off limits. But to carry them out, you need to satisfy a few conditions.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/cors/&quot;&gt;this page&lt;/a&gt; for a much more thorough exploration of CORS and its implications for both the client and the server, but for now the most important thing to know is this: in order for a cross-origin request to succeed, the server needs to include an ‘Access-Control-Allow-Origin’ header, and that header needs to authorize the requesting URL (either specifically or via a &lt;code&gt;&#39;*&#39;&lt;/code&gt; value).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cool, but I don’t control the API’s response headers…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Right. You’re probably not in a position to assure that your API supports the required response headers.&lt;/p&gt;

&lt;p&gt;At this point, you have a few options. &lt;/p&gt;

&lt;p&gt;The first is to get in touch with people who host the API and request that they support cross-origin requests. It may be ignored or take awhile, but it’s a path of least resistance that they have little reason to turn down beyond not having the time (an admittedly fair obstacle).&lt;/p&gt;

&lt;p&gt;The second is to roll your own proxy server. Even if you can’t get the API host to support cross-origin requests, you can make your own server that does - and then use it to hit the target API outside of the browser.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;The third is to take advantage of other services that do the work for you. &lt;a href=&quot;https://jsonp.afeld.me/&quot;&gt;This site&lt;/a&gt;, for example, will act as a proxy server for you, without any coding on your behalf. Simply append the target url to &lt;code&gt;https://jsonp.afeld.me/?url=&lt;/code&gt;, and the CORS request will succeed.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That’s pretty easy…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Indeed, it’s not very difficult to get around the barriers to cross-origin requests. The main question is simply how much work you’re willing/need to do given your use case.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;A &lt;a href=&quot;http://edgeguides.rubyonrails.org/api_app.html&quot;&gt;Rails API&lt;/a&gt; could do the trick. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;One thing to note about this solution is that it creates some security concerns. Since you’ll be passing your data through a proxy you don’t control, you’ll probably want to exercise discretion concerning what sort of information you pass through. The proxy could intercept (a) sensitive data from the API, or (b) private API keys in the URL (which could be a &lt;a href=&quot;https://rosspenman.com/api-key-exposure/&quot;&gt;major problem&lt;/a&gt;). &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 11 Aug 2015 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io//javascript/2015/08/11/cross-origin-resource-sharing.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//javascript/2015/08/11/cross-origin-resource-sharing.html</guid>
        
        <category>ajax</category>
        
        <category>cors</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Doing More Stuff More Easily: Implementing the Open-Closed Principle in Server Architecture</title>
        <description>&lt;p&gt;As you may have deduced from &lt;a href=&quot;/java/2015/06/06/simple-java-server.html&quot;&gt;several&lt;/a&gt; &lt;a href=&quot;/java/2015/06/17/handler-adapter-architecture.html&quot;&gt;previous&lt;/a&gt; &lt;a href=&quot;/java/2015/06/19/java-logging-utility.html&quot;&gt;posts&lt;/a&gt;, I’ve been spending some of my time working on an HTTP server. It’s raised some really interesting challenges on numerous fronts, but one that really got me thinking had to do with figuring out the proper mechanism for routing requests.&lt;/p&gt;

&lt;p&gt;It didn’t seem like a particularly big deal when I only had to deal with a few simple requests, since I could just figure everything out with a conditional:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RootResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/file&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FourOhFourResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This seems to work OK with a small amount of relatively simple requests, but you’re probably already starting to notice the issue: what about when things get more complicated? Say I’ve got to deal with 100 different requests, sometimes checking things in the header (&lt;code&gt;request.isAuthorized()&lt;/code&gt;, &lt;code&gt;request.hasRange()&lt;/code&gt;, etc.). That conditional is going to get pretty nasty.&lt;/p&gt;

&lt;p&gt;And, conveniently, this problem even has a name: it’s an illustration of what happens when you violate the Open-Closed Principle. That is to say, this approach is not open for extension but closed for modification. Every new request is going to require that you go in an edit that conditional.&lt;/p&gt;

&lt;p&gt;But is there another way? Perhaps server architects have just been toiling away in this sort of mess for years, carrying out such a herculean task that we ought stand in awe of their dedication and resilience.&lt;/p&gt;

&lt;p&gt;Of course there’s another way. Anyone who’s got a passing familiarity with Rails should know as much. Does this look familiar?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;                  &lt;span class=&quot;s2&quot;&gt;&amp;quot;static_pages#home&amp;quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;     &lt;span class=&quot;s2&quot;&gt;&amp;quot;help&amp;quot;&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&amp;quot;static_pages#help&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;     &lt;span class=&quot;s2&quot;&gt;&amp;quot;about&amp;quot;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&amp;quot;static_pages#about&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;     &lt;span class=&quot;s2&quot;&gt;&amp;quot;contact&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&amp;quot;static_pages#contact&amp;quot;&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s the beginning of the &lt;code&gt;config/routes.rb&lt;/code&gt; file from Michael Hartl’s &lt;a href=&quot;https://www.railstutorial.org/&quot;&gt;Rails Tutorial&lt;/a&gt;, and it’s accomplishing precisely the task we’ve set out to tackle. It’s also pretty straightforward and elegant - &lt;code&gt;x&lt;/code&gt; request maps to &lt;code&gt;y&lt;/code&gt; controller action.&lt;/p&gt;

&lt;p&gt;That’s a pretty important verb: “map”. It’s also a data structure. In Java, we might think about a &lt;code&gt;HashMap&lt;/code&gt;, where keys could be requests corresponding to values that designate appropriate controllers.&lt;/p&gt;

&lt;p&gt;In retrospect, it’s got this sort of facepalm-eliciting simplicity: associate routes with controllers in a map, then make calls to that map whenever you need to route a request.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Routes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Routes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;routes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addRoute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRoute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course, this is a fairly naive implementation that could be finessed a bit, but it’s the seedling for an extensible architecture that satisfies the Open-Closed principle, and it makes your life a lot easier when you want to add new routes to your server down the line.&lt;/p&gt;

</description>
        <pubDate>Tue, 04 Aug 2015 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io//java/2015/08/04/ocp-server-router.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//java/2015/08/04/ocp-server-router.html</guid>
        
        <category>server</category>
        
        <category>router</category>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>Getting Started With React - Part 3: The Flux Architecture</title>
        <description>&lt;p&gt;So we’ve got some sense about how we can work with React components to generate some nice looking views, and even how we can change them up in response to user input. Pretty nifty.&lt;/p&gt;

&lt;p&gt;But what if we want to initiate more broad sweeping changes across numerous components? Or if we want to react to larger chunks of data from an API call? We might figure out a way to do so with what we already have, but our code could get pretty not-so-clean pretty quickly.&lt;/p&gt;

&lt;p&gt;Luckily, there’s no need to indulge such indiscretions, thanks to &lt;a href=&quot;https://facebook.github.io/flux/docs/overview.html&quot;&gt;the Flux architecture&lt;/a&gt;. Flux is a pattern for implementing a unidirectional data flow, one that makes it simple to implement significant and far-reaching changes to our views reliably and efficiently. &lt;/p&gt;

&lt;p&gt;To get a sense for what we can do with the Flux architecture, we’re going to take a run at fitting it into our demo app. Since Flux is a pattern rather than a framework, we’ll be looking at &lt;em&gt;a&lt;/em&gt; way to implement it rather than &lt;em&gt;the&lt;/em&gt; way, but we’ll end up with a nice foundation for implementing further changes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before We Begin: Overview&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you’ve just starting to follow along with this post, you can catch up with the progress we’ve made so far by checking out the third commit of &lt;a href=&quot;https://github.com/rmulhol/demo-react-app&quot;&gt;the demo react app Github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you’re up to date, you’ll want to install Flux by running &lt;code&gt;npm install --save flux&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Adding Flux to our project’s dependencies gives us access to the dispatcher, an important tool in the unidirectional data flow that characterizes the Flux architecture. The dispatcher mediates between the actions that are fired by components and the stores that update components.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rmulhol.github.io//assets/flux-architecture.png&quot; alt=&quot;flux-architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this post, we’ll be implementing the Flux architecture to duplicate our app’s existing behavior. Though we won’t be adding any new features for the user, we’ll be tidying up the backend so as to lay the groundwork for future additions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Add a Dispatcher&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first thing we’ll want to do is create a dispatcher. It can live at &lt;code&gt;js/dispatcher/dispatcher.js&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/7fe46f4f9cea3780eacf.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;With this in place, we’ll be able to &lt;code&gt;require&lt;/code&gt; and call the dispatcher from other parts of our application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Create an Action&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After we’ve got a dispatcher, we’ll want to &lt;code&gt;require&lt;/code&gt; and use it in a file designated to contain our actions. Create the following file at &lt;code&gt;js/actions/demo_app_actions.js&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/73355cb3dca6fd138fd8.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Here, the &lt;code&gt;toggleLogo()&lt;/code&gt; method uses the dispatcher to broadcast a payload to the rest of our application. In this case, the payload includes keys for &lt;code&gt;actionType&lt;/code&gt; and &lt;code&gt;showReactLogo&lt;/code&gt;, which correspond to a string and a boolean, respectively.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Note  the bang (!) before &lt;code&gt;showReactLogo&lt;/code&gt;, which means we’re dispatching a value for &lt;code&gt;showReactLogo&lt;/code&gt; that reflects the opposite of whatever’s passed in. As will become more clear shortly, this is an example of handling state manipulation in the actions rather than the components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Open a Store&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once we’ve got actions that invoke the dispatcher to issue payloads to our application, we’ll want to register some callbacks with the dispatcher to handle those payloads. We do this on a store, which we’ll put at &lt;code&gt;js/stores/demo_app_store.js&lt;/code&gt;.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/9e236715490835053a8c.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Let’s unpack what’s going on here.&lt;/p&gt;

&lt;p&gt;In addition to the dispatcher, we’re requiring the &lt;code&gt;EventEmitter&lt;/code&gt; and &lt;code&gt;utils&lt;/code&gt; package from Node.js, which will enable us to inherit features that allow us to run callbacks and handle dispatched payloads.&lt;/p&gt;

&lt;p&gt;We’ve also got an &lt;code&gt;addLogoListener()&lt;/code&gt; method that registers a callback to be invoked whenever a “toggle-logo” event is emitted. We’ll use it in our component to complete state modifications initiated by the actions.&lt;/p&gt;

&lt;p&gt;Finally, we’ve got a &lt;code&gt;dispatchToken()&lt;/code&gt; method that contains a &lt;code&gt;switch&lt;/code&gt; statement.&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; The only &lt;code&gt;case&lt;/code&gt; we’ve included so far corresponds to the &lt;code&gt;actionType&lt;/code&gt; of our only action (“toggle-logo”), and it emits an event of that type storing the value that corresponds to the payload’s &lt;code&gt;showReactLogo&lt;/code&gt; key.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Refactor - add Constants&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At this point, a lot of the behavior we’ve implemented depends on the &lt;code&gt;actionType&lt;/code&gt; “toggle-logo”, and we’ve duplicated that string at several places in our code. It would be shame if something went wrong because of a typo in one of those places.&lt;/p&gt;

&lt;p&gt;For this reason, it can be helpful to keep track of certain constants in a &lt;code&gt;js/constants/constants.js&lt;/code&gt; file. We’ll be using this file to store values for the &lt;code&gt;actionType&lt;/code&gt; of dispatched payloads right now, but we could also put any other important constants here as we go.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/66eaec512c7a94252a27.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;With this in place, we can change how we refer to the “toggle-logo” value for our &lt;code&gt;actionType&lt;/code&gt; key in our action:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/7190e9eff411565edb29.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;And in our store:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/908f2256eb04baba12b3.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;It’s only a minor detour but, like much of what we’re doing in this post, it will make life easier down the line.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5: Edit Components&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that stores are emitting events that carry values from our actions’ payloads, we can add listeners on our components to initiate change in response to emitted events. This is the logic that replaces the existing state transitions on our components.&lt;/p&gt;

&lt;p&gt;The revised &lt;code&gt;js/components/body.js&lt;/code&gt; file should be modified to look like this: &lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/a34fdef63bc0e79d9731.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The important changes we’ve made here are twofold:&lt;/p&gt;

&lt;p&gt;1) We’ve added a &lt;code&gt;componentDidMount()&lt;/code&gt; method, which will be invoked automatically after the component renders, to register a callback via our &lt;code&gt;addLogoListener()&lt;/code&gt; method from the store. That callback alters the component’s state to correspond to the emitted value of &lt;code&gt;showReactLogo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;2) We’ve updated our &lt;code&gt;toggleImage()&lt;/code&gt; method to fire an action instead of directly setting state on the component. No longer is our component manipulating state directly; instead, it passes much of that work off to the action, dispatcher, and store.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wrap Up&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At this point, our app is working exactly the same as it did at the beginning of the post. Exciting!&lt;/p&gt;

&lt;p&gt;In all seriousness, though, we’ve just laid down an implementation of the Flux architecture which sets us up to make further changes with the reliability of unidirectional data flow at our backs. In future posts, we’ll take a look at some of the cool things we can accomplish with that in place.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;For a more comprehensive description of the Flux architecture, check out &lt;a href=&quot;https://www.npmjs.com/package/flux&quot;&gt;the npm page for the Flux package&lt;/a&gt;.  &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;In subsequent posts, we’ll discuss how to pass and use more sophisticated data, like JSON data from an API call. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;It might feel a little redundant to be creating directories each time we’re adding a file here, and that’s fair. But dividing up our application into separate directories for components, actions, stores, and so forth initiates a nice organizational structure we’ll appreciate if and when we start accumulating more files of each type. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;We’ve called this method &lt;code&gt;dispatchToken()&lt;/code&gt; because it returns a token that we can use for controlling the order of execution of registered callbacks, but it’s also worth noting that this method is doing much more than that. &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 27 Jul 2015 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io//javascript/2015/07/27/react-flux-architecture.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//javascript/2015/07/27/react-flux-architecture.html</guid>
        
        <category>react</category>
        
        <category>flux</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Getting Started With React - Part 2: Exploring Components</title>
        <description>&lt;p&gt;React is a library for building user interfaces, but most of the work we’ve done so far has only laid the groundwork for actually carrying out that task. The UI we left off with doesn’t exactly expose React’s power.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rmulhol.github.io//assets/browser-view-hello-world.png&quot; alt=&quot;browser-view-hello-world&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we want to start building something that looks better and does more, we should start to get a handle on React’s tool for generating views: components.&lt;/p&gt;

&lt;p&gt;Components are modules that include a &lt;code&gt;render()&lt;/code&gt; method that tells the program what to display. They can generate content dynamically, responding to data passed in by other components or the user. &lt;/p&gt;

&lt;p&gt;Once you start taking advantage of their numerous features and piecing them together, components provide a valuable tool for constructing sophisticated user interfaces. &lt;/p&gt;

&lt;p&gt;Let’s take a look at how components can help us transform our little “hello, world” app into something a bit more visually appealing…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before We Begin: Housekeeping&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you’re just hopping on now, you can access the source code for the work we’ve done so far in the second commit of the &lt;a href=&quot;https://github.com/rmulhol/demo-react-app&quot;&gt;demo-react-app Github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before we begin coding up components, we’ll want to install a few additional tools. The first is &lt;a href=&quot;http://react-bootstrap.github.io/&quot;&gt;react-bootstrap&lt;/a&gt;, which will provide a quick and easy way to add some styling. You can install it by running &lt;code&gt;npm install --save react-bootstrap&lt;/code&gt;. You’ll also want to add a link to the Bootstrap stylesheet in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of your &lt;code&gt;index.html&lt;/code&gt; file:&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rmulhol.github.io//assets/index-with-bootstrap.png&quot; alt=&quot;index-with-bootstrap&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, we’ll want to install &lt;a href=&quot;https://github.com/substack/watchify&quot;&gt;Watchify&lt;/a&gt;, which will enable us to automatically recompile our &lt;code&gt;js/bundle.js&lt;/code&gt; file each time we make an edit to our source code. Add it by running &lt;code&gt;npm install --save-dev watchify&lt;/code&gt;, and then add a &lt;code&gt;start&lt;/code&gt; script to your &lt;code&gt;package.json&lt;/code&gt; file:&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rmulhol.github.io//assets/pkg-with-start-script.png&quot; alt=&quot;pkg-with-start-script&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we can run &lt;code&gt;npm run start&lt;/code&gt; to initiate our &lt;code&gt;watchify&lt;/code&gt; script, spin up an &lt;code&gt;http-server&lt;/code&gt; in our project directory, and see changes reflected in the browser almost immediately as we save them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Extract A Component&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Where last left off, we were including the full view for our app in the &lt;code&gt;js/app.js&lt;/code&gt; file:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/dfcb2fd783ada9654894.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;This works fine when we’ve got so little display, but it quickly becomes unmanageable as our view becomes more substantial. The solution, in React, is to delegate the work to components.&lt;/p&gt;

&lt;p&gt;Let’s start by moving the JSX code we’ve got in the &lt;code&gt;js/app.js&lt;/code&gt; file over to a new &lt;code&gt;js/components/home_page.js&lt;/code&gt; file. Now our &lt;code&gt;js/app.js&lt;/code&gt; file can look like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/8e7a24fddd37ab15ff70.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;HomePage /&amp;gt;&lt;/code&gt; call exhibits React’s syntax for instantiating components in JSX - they exist as their own element on the page (with whatever components reside on them nested further down).&lt;/p&gt;

&lt;p&gt;To make this work the same as before, we need the &lt;code&gt;js/components/home_page.js&lt;/code&gt; file to look like this:&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/7cee0ed45ea4620b7310.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;If we load the page in the browser, everything will look the same. But we’ve introduced a valuable tool: now we can apply the same technique to nest multiple components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Nesting Components&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Say, for example, we want to add a header, a body, and a footer to our site. This is a great opportunity to start nesting components.&lt;/p&gt;

&lt;p&gt;Instead of having the home page store all of the content for the site, it could instantiate several other components that would each handle one part of the view.&lt;/p&gt;

&lt;p&gt;To do so, we want to change our &lt;code&gt;js/components/home_page.js&lt;/code&gt; file to contain the three subordinate components: &lt;code&gt;&amp;lt;Header /&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Body /&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;/Footer&amp;gt;&lt;/code&gt;.&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/cdef870ab3a9deca4967.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Once that’s in place, we need to create the subordinate components.&lt;/p&gt;

&lt;p&gt;Here’s a &lt;code&gt;js/components/header.js&lt;/code&gt; file that takes advantage of some react-bootstrap components to create a Navbar that’s fixed to the top of the page:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4d5e127a79a56f24ce07.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;A &lt;code&gt;js/components/body.js&lt;/code&gt; file to welcome our users:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/27f433cba607631a9346.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;And a &lt;code&gt;/js/component/footer.js&lt;/code&gt; file to round things out:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4dbfee934b2fa85249fa.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;At this point, our page starts looking a lot better:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rmulhol.github.io//assets/browser-view-with-header-and-footer.png&quot; alt=&quot;browser-view-with-header-and-footer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And we’ve got the added bonus that things are increasingly separated out from one another: we can independently edit the header, body, or footer for the page without too much concern about the others.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Dynamic Content&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The page is starting to look a little better, but it still isn’t very “reactive” - we basically could have put everything together with some HTML and CSS. What more can we get out of components?&lt;/p&gt;

&lt;p&gt;Say we wanted to add a button that would toggle the image users see on the body of the page. Instead of always seeing the React logo, they could click the button to see the JavaScript logo (and back and forth ad infinitum).&lt;/p&gt;

&lt;p&gt;An easy way to implement this in React is to use the component’s properties and state. Properties are values which should never change, while state is explicitly mutable via the &lt;code&gt;setState()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Properties can be passed into a component when it’s instantiated, but they can also be set with the &lt;code&gt;getDefaultProps()&lt;/code&gt; method. Similarly, initial state can be set via &lt;code&gt;getInitialState()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we wanted to add this new functionality entirely within the body component, we could do so like so:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/c11e477b504fe2b552e0.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Here, we set the urls of the two image logos as properties of our Body component (since they will never change), then set the initial state with &lt;code&gt;showReactLogo&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;. When the user clicks the button, we call &lt;code&gt;toggleImage()&lt;/code&gt; to set &lt;code&gt;showReactLogo&lt;/code&gt; to the opposite state of whatever it was. Within our &lt;code&gt;render()&lt;/code&gt; call, we determine which image to show based on current state.&lt;/p&gt;

&lt;p&gt;The result is that users can toggle the image back and forth by clicking our button. Our app is reacting to something!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rmulhol.github.io//assets/browser-view-with-image-toggle.png&quot; alt=&quot;browser-view-with-image-toggle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wrap Up&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We’ve definitely made some improvements to our demo app by starting to work with components. We’re now displaying formatted text, incorporating images, and changing things on the fly. We’ve also locked down a less intrusive build process for faster feedback loops.&lt;/p&gt;

&lt;p&gt;But we’ve still barely scratched the surface of all we can do with React. Stay tuned for part 3!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;To access the latest version of the Bootstrap stylesheet, head over to &lt;a href=&quot;http://getbootstrap.com/getting-started/&quot;&gt;Bootstrap’s Getting Started page&lt;/a&gt; and check out the Bootstrap CDN. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;I’ve added the most simple version of the &lt;code&gt;start&lt;/code&gt; script here, but you may find it helpful to add the &lt;code&gt;-v&lt;/code&gt; flag to get more verbose output each time your &lt;code&gt;js/bundle.js&lt;/code&gt; file is recompiled. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;Note our use of &lt;code&gt;React.createClass()&lt;/code&gt; - this is a constructor for React components. Check out the &lt;a href=&quot;https://facebook.github.io/react/docs/top-level-api.html&quot;&gt;React Top-Level API&lt;/a&gt; for info on React methods you’ll want to know. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;Note the closing tags - JSX requires closing tags even in places where you might normally be able to get away with leaving them off. &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 23 Jul 2015 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io//javascript/2015/07/23/starting-react-components.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//javascript/2015/07/23/starting-react-components.html</guid>
        
        <category>react</category>
        
        <category>components</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Getting Started With React - Part 1: Setting Up the File Directory</title>
        <description>&lt;p&gt;Recently I’ve had the opportunity to do some work with &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;, the JavaScript libary put together by Facebook for building user interfaces. It’s been a really cool experience, and I’m growing more comfortable working with React everyday.&lt;/p&gt;

&lt;p&gt;That’s not to say the process has been hiccup free - it’s been littered with (surmountable) obstacles. Though that’s to be expected when you’re new to any library, it’s particularly pronounced in this instance by the absence of a standardized format for React projects.&lt;/p&gt;

&lt;p&gt;You see, there is no &lt;code&gt;rails new ...&lt;/code&gt; for React. There are several super helpful boilerplate &lt;a href=&quot;https://github.com/petehunt/react-boilerplate&quot;&gt;templates&lt;/a&gt; and &lt;a href=&quot;https://github.com/newtriks/generator-react-webpack&quot;&gt;generators&lt;/a&gt;, but they’re not uniform. People pretty much include whatever they think they’ll need, and they all have different ideas as to what exactly that is.&lt;/p&gt;

&lt;p&gt;I’m not going to tell you that my preferences are any better than those of the folks who have done this work,&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; but I am willing to wager that mine are more minimal. I’m interested in having the bare-bones setup for getting up and running, and we can add other stuff later.&lt;/p&gt;

&lt;p&gt;So, in what follows, I want to lay out the steps for setting up a file directory you can use to build a React project. We’ll include only what we need to start hacking, and then cover further topics in subsequent posts. If you’re willing to hop on for the ride, let’s dive into part 1 of getting started with React.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Setting Up Your &lt;code&gt;package.json&lt;/code&gt; File&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One thing we’ll be using to manage our project’s dependencies is &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; - the Node Package Manager. If you don’t have that, you’ll want to &lt;a href=&quot;https://docs.npmjs.com/getting-started/installing-node&quot;&gt;install Node.js and npm&lt;/a&gt; now.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Once you’ve got npm, you can run &lt;code&gt;npm init&lt;/code&gt; in an empty directory to setup a basic &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt; file. By answering the prompts, you’ll identify some key attributes of your project: its name, version, license, etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rmulhol.github.io//assets/npm-init.png&quot; alt=&quot;npm-init-execution&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once we’ve got a basic &lt;code&gt;package.json&lt;/code&gt; file setup, we can add one of the more important dependencies for our project - React - with a single command: &lt;code&gt;npm install --save react&lt;/code&gt;.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Next, we can install some dev dependencies we’ll be needing: &lt;code&gt;npm install --save-dev browserify reactify&lt;/code&gt;.&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;  &lt;a href=&quot;https://github.com/substack/browserify-handbook&quot;&gt;Browserify&lt;/a&gt; will enable us to compile modules for the browser, and &lt;a href=&quot;https://github.com/andreypopp/reactify&quot;&gt;Reactify&lt;/a&gt; will help Browserify to play nicely with the &lt;a href=&quot;https://facebook.github.io/jsx/&quot;&gt;JSX&lt;/a&gt; syntax we’ll be using in our React modules.&lt;/p&gt;

&lt;p&gt;At this point, your &lt;code&gt;package.json&lt;/code&gt; file should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rmulhol.github.io//assets/pkg-with-devDeps.png&quot; alt=&quot;pkg-with-devDeps&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ll want to add a build script to make it look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rmulhol.github.io//assets/pkg-with-build-script.png&quot; alt=&quot;pkg-with-build-script&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And then install &lt;code&gt;browserify&lt;/code&gt; globally so that our script will execute: &lt;code&gt;npm install -g browserify&lt;/code&gt;.&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;That will do it for our &lt;code&gt;package.json&lt;/code&gt; file, for now. Time to start building out the rest of our file directory structure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Add Files/Directories&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Just by setting up our dependencies and build script, we’ve done most of the leg work necessary to get a React project up and running. The next step is pretty simple: put together the file directory structure.&lt;/p&gt;

&lt;p&gt;There are a number of ways you could organize your directory, but to play nicely with our current setup, you’ll want to run the following commands:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rmulhol.github.io//assets/file-directory-commands.png&quot; alt=&quot;file-directory-commands&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That will set up a file tree that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rmulhol.github.io//assets/file-directory-tree.png&quot; alt=&quot;file-directory-tree&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point, we’re ready to put in some code!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Filling in &lt;code&gt;index.html&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;index.html&lt;/code&gt; file stores the basic page we’ll be working on. You can fill it in like so:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/51035643a1a4b29c9a23.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The key to this file is the &lt;code&gt;section&lt;/code&gt; with the &lt;code&gt;id&lt;/code&gt; “react” - that’s the entry point for our React code. It’ll be filled in by the &lt;code&gt;bundle.js&lt;/code&gt; script (which is generate by Browserify).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Filling in &lt;code&gt;app.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Almost there! The next step is to pop some code into our &lt;code&gt;app.js&lt;/code&gt; file that indicates what to put in the “react” &lt;code&gt;section&lt;/code&gt;. You can do that like so:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/dfcb2fd783ada9654894.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;This code tells React to find the page element with the &lt;code&gt;id&lt;/code&gt; “react” and put the preceding JSX code (which looks like raw html) there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5: Build and Run&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At this point, we’ve got all the hand-written code we’re going to need. The next step is to run &lt;code&gt;npm run build&lt;/code&gt;, which will trigger the build script we put in our &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;After that’s complete, we’re ready to fire up our app! To do that, we need an http server. The easiest way to get one is probably to run &lt;code&gt;npm install -g http-server&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once that’s installed, head to your project’s root directory and run &lt;code&gt;http-server&lt;/code&gt;. Pull up the browser and head over to http://localhost:8080/ and…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rmulhol.github.io//assets/browser-view-hello-world.png&quot; alt=&quot;browser-view-hello-world&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s alive! That’s not exactly the fancy view we were hoping for when we decided to explore this newfangled UI library, but it’s a start!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So, we clearly have a lot more to learn before we can start really taking advantage of React’s power, but we are now working with the library. Just by installing a few dependencies, filling out a few files, and executing a few scripts, we’re right about where we’d expect to be with something like a &lt;code&gt;rails new ...&lt;/code&gt; for React.&lt;/p&gt;

&lt;p&gt;Stay tuned for future posts on getting started with React!&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;They’re awesome &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Seriously, if you’ve read this far, you’re definitely going to want these things. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;The &lt;code&gt;--save&lt;/code&gt; flag tells npm to list react in the &lt;code&gt;dependencies&lt;/code&gt; section of our &lt;code&gt;package.json&lt;/code&gt; file. That’s useful for anyone who clones our repo, since they can now run &lt;code&gt;npm install&lt;/code&gt; to install all of the project’s dependencies. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;The &lt;code&gt;--save-dev&lt;/code&gt; flag tells npm to list Browserify and Reactify in the &lt;code&gt;devDependencies&lt;/code&gt; section of our &lt;code&gt;package.json&lt;/code&gt; file. &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;The &lt;code&gt;-g&lt;/code&gt; flag tells npm to install Browserify globally, so that we can run &lt;code&gt;browserify&lt;/code&gt; from the command line anywhere on our system. &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot;&gt;
      &lt;p&gt;If you’d like to follow along with the source code we’re developing over this series of posts, check out the &lt;a href=&quot;https://github.com/rmulhol/demo-react-app&quot;&gt;demo-react-app Github repo&lt;/a&gt;. The changes from this post are reflected in the second commit. &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 21 Jul 2015 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io//javascript/2015/07/21/starting-react-directory.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//javascript/2015/07/21/starting-react-directory.html</guid>
        
        <category>react</category>
        
        <category>npm</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Process over Product: Learning From Refactoring</title>
        <description>&lt;p&gt;Recently, I’ve been reading &lt;em&gt;Refactoring: Ruby Edition&lt;/em&gt; by Jay Fields, Shane Harvie, Martin Fowler, and Kent Beck. It’s been a whirlwind tour of the problems that provoke you to refactor and the solutions to those problems, as well as a really insightful look into the process of refactoring.&lt;/p&gt;

&lt;p&gt;I had always thought of myself as refactoring whenever I made edits to my code. After all, I was trying to make it better.&lt;/p&gt;

&lt;p&gt;But refactoring actually denotes a much more specific activity. According to the authors, refactoring is defined as “the process of changing a software system in such a way that it does not alter the external behavior of the code yet improves its internal structure” (xv).&lt;/p&gt;

&lt;p&gt;Though it sounds somewhat simple, there’s a lot to unpack. In what follows, I want to lay out the steps that go into not just editing code, but actually refactoring.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Write Tests&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A core tenet of refactoring is that you are not altering the external behavior of the code while you’re making changes to its internal structure. An improvement to the code’s internal structure means little if you’re simultaneously breaking existing features.&lt;/p&gt;

&lt;p&gt;In order to be sure you’re not altering the external behavior of the code, it’s super helpful to have tests. Tests provide quick and automated feedback as you’re making changes, allowing you to refactor with confidence.&lt;/p&gt;

&lt;p&gt;Refactoring is actually built into the three stages of test-driven development: red, green, refactor. Once you’ve defined some code’s expected behavior and written the code to execute that behavior, you should also be refactoring to be sure your code is as clean and maintainable as possible. &lt;/p&gt;

&lt;p&gt;Even if you’re not practicing test-driven development, you should write tests as you begin to refactor. That way, you can make sweeping changes to the internal structure of the code and be sure that you’re not taking two steps back as you’re taking one step forward. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Identify Smells&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order to add some rhyme and reason to your refactoring, it’s necessary to ground your vision of how the code’s internal structure could be improved in some sense of what’s wrong with its existing organization.&lt;/p&gt;

&lt;p&gt;The issues that provoke refactoring are described by the authors of &lt;em&gt;Refactoring&lt;/em&gt; as “code smells”: “certain structures in code that suggest (sometimes they scream for) the possibility of refactoring” (73).&lt;/p&gt;

&lt;p&gt;This could be something simple like duplicated code or a long method, or something more complex like a refused bequest.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; The authors provide a helpful catalogue of code smells that set up a framework for analyzing and improving code by recognizing existing flaws.&lt;/p&gt;

&lt;p&gt;It doesn’t particularly matter which code smell you’re trying to snuff out while refactoring, it just matters that you have some sense for what the code smell is. Proceeding to edit code without a clear sense of what error you’re correcting leaves you prone to making edits that leave the code worse than when you found it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Baby Steps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As the authors lay out the various types of refactorings that can be carried out to correct the wide variety of different smells, they go into meticulous detail in laying out the steps for executing each one correctly.&lt;/p&gt;

&lt;p&gt;Such details are neither circumlocutory nor superfluous; rather, they provide a roadmap for carrying out refactorings in a manner that’s optimally productive and efficient.&lt;/p&gt;

&lt;p&gt;One step that shows up many times along the way is running the tests. As you’re refactoring, the tests should stay green throughout. If you let the tests go red for an extended period of time, the possibility arises that you may not be able to get back to green without undoing all of your adjustments.&lt;/p&gt;

&lt;p&gt;Refactoring should proceed in small, incremental steps so that you’re never far away from a good stopping point. Of course, you will likely continue to refactor throughout the life of your program. But doing so in baby steps assures that you can react quickly if you make a mistake.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Continue&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Though &lt;em&gt;Refactoring&lt;/em&gt; provides an awesome catalogue of smells and refactorings, you’re only really going to master the art of writing good code with practice and experience. Practice helps you carry out refactorings with ease, and experience gives you a sense for which smells are acceptable at the present juncture.&lt;/p&gt;

&lt;p&gt;You may learn of new smells that cause you to carry out different refactorings. You may learn of new techniques that allow you to correct particular smells in a better way. You may even find yourself reversing previous refactorings down the line. &lt;/p&gt;

&lt;p&gt;All of this is fine and expected, and it’s something that reflects the greater degree of knowledge you accumulate about how your program should be designed as you work with it over time. &lt;/p&gt;

&lt;p&gt;The key is to continue to refactor so that you’re always leaving the code better than you found it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I’ve found &lt;em&gt;Refactoring: Ruby Edition&lt;/em&gt; to be a tremendously rewarding and worthwhile read. I’m excited to get more familiar with the smells and refactorings they lay out, as well as the process of doing refactoring the right way.&lt;/p&gt;

&lt;p&gt;They only thing that’s certain is that code I come across will warrant refactoring, and I’m excited to have gained some perspective into how to do so well.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Subclasses that doe not need the methods or data of their parents. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 05 Jul 2015 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io//general/2015/07/05/refactoring-ruby-edition.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//general/2015/07/05/refactoring-ruby-edition.html</guid>
        
        <category>refactoring</category>
        
        <category>tdd</category>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Collective Ownership: Developing Software as a Team</title>
        <description>&lt;p&gt;Over the past few days, I’ve had the chance to observe some more senior software developers as they’ve worked on building and modifying real world, living codebases. It’s been an extremely educational experience on many fronts, but the thing that’s stuck out to me the most so far is how involved everyone is with everyone else.&lt;/p&gt;

&lt;p&gt;Successful software, it turns out, isn’t the product of one genius individual; in most instances, at least, it’s something that grows out of the coalescence of a team.&lt;/p&gt;

&lt;p&gt;Of course, a team could just be a collection of individuals - each toiling away on their own tasks that will hopefully somehow fit together. But in order for a team to form a whole that’s greater than the sum of its parts, something more needs to happen: team dynamics need to be instilled.&lt;/p&gt;

&lt;p&gt;In this post, I want to review some of the behaviors that go into being part of a successful software development team. While such behaviors may not be especially necessary in the context of the individual projects I’ve worked on thus far, they seem like they’ll hold a lot of relevance in the (team)work I hope to be doing in the future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Stand Up&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order for everyone on a team to be on the same page, it’s helpful for each team member to know what page each of their teammates are on. It might sound trivial, but having a bit of time to catch up with your teammates before getting down to writing code is crucial. Stand up meetings fill this role.&lt;/p&gt;

&lt;p&gt;Stand up meetings offer opportunities for teammates to share the progress they’ve made, explain what tasks they’re hoping to accomplish in the immediate feature, and solicit counsel when some obstacle is standing in their way. When kept brief and to the point, they offer a great opportunity for everyone to stay up to date with one another.&lt;/p&gt;

&lt;p&gt;At a far more basic level, they assure team cohesion. When you engage with your teammates every morning, you’re sure to be keeping up with each other. Having a sense for what everyone else is up to and how their tasks fit into the larger project makes it’s easier to envision how you and your teammates’ contributions will fit together.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Document Objectives&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The developers I’ve worked with divide up tasks into a set of “stories”. Each story lays out a feature that needs to be built, as well as any specifications that further clarify the nature of that feature. The total list of stories is accessible to the entire team, and each story is marked as either to do, in progress, or complete.&lt;/p&gt;

&lt;p&gt;In my individual work, I’ve used a rudimentary version of this setup, documenting tasks I hope to accomplish in a to do list and crossing things off as progress is made. But having a more sophisticated layout allows you to share that knowledge and tackle those objectives with your team.&lt;/p&gt;

&lt;p&gt;Stories that are accessible to the entire team help to provide a shared sense for the tasks that lie ahead, and documenting who’s working on what further assures that no work is overlapping.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Use Branches&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;People who are working as part of a team don’t all push their commits to master; they set up branches that describe what task they’re working on. When the work is finished, they can submit a pull request for the team to review.&lt;/p&gt;

&lt;p&gt;Working with branches helps to document and organize buckets of work as progress is being made. A large number of commits might fit into the development of a single feature, but branches makes it easy to consolidate them. Their label communicates how everything assembles into one goal.&lt;/p&gt;

&lt;p&gt;Branches also make it easier teammates to review and merge contributions. If the progress looks good without modification, merge. If it needs some more work, revise and resubmit. If it’s looking like you need to go in another direction, no worries: revert to master.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Stay in Touch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Teammates further contribute to the fostering of team dynamics by deepening their communications with one another as necessary.&lt;/p&gt;

&lt;p&gt;Think knocking out your story will require some architectural changes to the larger organization of the project? Get in touch with your team. Maybe they see some merit to your suggestion and the change is approved with everyone on board. If not, maybe they can suggest some approaches that work within the existing architecture.&lt;/p&gt;

&lt;p&gt;Notice that a teammate has wrapped up a story and submitted a pull request? Give it a review. You might have some additional perspective that assures everything will synthesize together as well as possible.&lt;/p&gt;

&lt;p&gt;Though the work of writing code may be something you approach on your own or with a pair, it never hurts to bring in an extra set of eyeballs. Teammates should put emphasis on staying in touch with one another to assure that progress fits within everyone else’s vision of the project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recap: There’s So Much More&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As I’ve put together my individual projects, I’ve found feedback loops to be really helpful. Getting other people’s perspectives helps me to see ways that I can improve my code and add new features because those folks are approaching my project from a clean slate.&lt;/p&gt;

&lt;p&gt;Working with a team, those feedback lopes aren’t just helpful - they’re essential. Teammates foster team dynamics by meeting up regularly, documenting tasks, working on branches, and staying in touch throughout.&lt;/p&gt;

&lt;p&gt;But that isn’t all that goes into being part of a team. There’s a lot more to learn, and I’m excited to get a better sense of how the most productive teams stay cohesive going forward. &lt;/p&gt;
</description>
        <pubDate>Fri, 03 Jul 2015 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io//general/2015/07/03/being-a-teammate.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//general/2015/07/03/being-a-teammate.html</guid>
        
        <category>team</category>
        
        <category>communication</category>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>What the Heck? Being Confused About Asynchronous Execution in JavaScript</title>
        <description>&lt;p&gt;As I’ve been working on using my Java server as a web interface for my Clojure tic tac toe game, I’ve found JavaScript very helpful. I use it for form validation on the game configuration page:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;validateGameConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;player1Move&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;player-1-move&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;player2Move&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;player-2-move&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;player1Move&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;player1Move&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Must enter a move signature for player 1.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;player2Move&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;player2Move&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Must enter a move signature for player 2.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;player1Move&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;player2Move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Player move signatures must be distinct.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And for creating event listeners on each board cell that trigger when the user selects a move:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Tic Tac Toe!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;Click An Open Space To Make A Move&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;square&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;square-1&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;form-1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;player-1-id&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;human&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;player-2-id&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ai&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;player-1-mv&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;player-2-mv&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;O&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;board&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; , , , , , , , , &amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;move&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;

      ...

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thisForm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;form-&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;square-&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thisForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;JavaScript has served it’s purpose and opened my eyes to all that you can accomplish on the client side. But it’s also left me scratching my head a few times.&lt;/p&gt;

&lt;p&gt;The first example wasn’t much trouble - it’s relatively straightforward. &lt;/p&gt;

&lt;p&gt;But the second was a different story. I had to manually declare the variable &lt;code&gt;thisForm&lt;/code&gt;; I couldn’t just inline &lt;code&gt;&#39;form-&#39; + i&lt;/code&gt; on the &lt;code&gt;getElementById&lt;/code&gt; call.&lt;/p&gt;

&lt;p&gt;Try it for yourself. If you replace the above code with this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;square-&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;form-&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Everything breaks. Or, more accurately, fails silently - the form is not submitted when a cell is clicked. &lt;/p&gt;

&lt;p&gt;So, what’s going on here?&lt;/p&gt;

&lt;p&gt;The problem relates to the nature of asynchronous listeners in JavaScript. Inside of the &lt;code&gt;for&lt;/code&gt; loop, the var &lt;code&gt;i&lt;/code&gt; is set to some integer between 1 and 9. As that’s happening, the elements defined by the id &lt;code&gt;&#39;square-&#39; + i&lt;/code&gt; are receiving event listeners that trigger when clicked.&lt;/p&gt;

&lt;p&gt;But the listener is not triggered at that moment - otherwise all the forms would be submitted when the script ran. Instead, the function to submit the form lies in wait for the event listener to trigger.&lt;/p&gt;

&lt;p&gt;But there’s a problem. When the event triggers, the var &lt;code&gt;i&lt;/code&gt; is no longer set to the value it was when the &lt;code&gt;for&lt;/code&gt; loop was executing - now it’s at 10 (mutable data, good stuff).&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; So when you click on a cell, you get the following error in the console:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Uncaught&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cannot&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;submit&amp;#39;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By the time the asynchronous listener is called, the object returned by &lt;code&gt;getElementById&lt;/code&gt; is null, since &lt;code&gt;&#39;form-&#39; + i&lt;/code&gt; evaluates to &lt;code&gt;&#39;form-&#39; + 10&lt;/code&gt; (or just &lt;code&gt;&#39;form-10&#39;&lt;/code&gt;), which doesn’t correspond to any ID on the page. &lt;/p&gt;

&lt;p&gt;Asynchronous callbacks can be tremendously confusing - they can lead you into the pit of &lt;a href=&quot;http://callbackhell.com/&quot;&gt;callback hell&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;But they’re also tremendously useful. They let you delay behavior until it’s needed, execute multiple actions at once, and avoid blocking.&lt;/p&gt;

&lt;p&gt;The trick is just figuring out how and when to use them, and then developing thick skin for whenever they leave you feeling like pulling your hair out.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Special thanks to Colin and Geoff for helping me to figure this stuff out. Another wildly helpful resource from Geoff: &lt;a href=&quot;https://www.destroyallsoftware.com/talks/wat&quot;&gt;wat&lt;/a&gt;. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 25 Jun 2015 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io//javascript/2015/06/25/confusing-javascript-var.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//javascript/2015/06/25/confusing-javascript-var.html</guid>
        
        <category>event</category>
        
        <category>variable</category>
        
        
        <category>javascript</category>
        
      </item>
    
  </channel>
</rss>
