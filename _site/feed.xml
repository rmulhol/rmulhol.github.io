<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rob Learns Ruby</title>
    <description>I&#39;m learning Ruby and sharing insights along the way.
</description>
    <link>http://rmulhol.github.io//</link>
    <atom:link href="http://rmulhol.github.io//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 26 Jan 2015 14:57:27 -0600</pubDate>
    <lastBuildDate>Mon, 26 Jan 2015 14:57:27 -0600</lastBuildDate>
    <generator>Jekyll v2.3.0</generator>
    
      <item>
        <title>Sort a LinkedList? Revisiting Insertion Sort in Java</title>
        <description>&lt;p&gt;In a &lt;a href=&quot;/java/2015/01/14/java-insertion-sort.html&quot;&gt;previous post&lt;/a&gt;, I showed a possible implementation of insertion sort written in Java. The code is an almost verbatim translation of pseudocode from &lt;a href=&quot;http://en.wikipedia.org/wiki/Introduction_to_Algorithms&quot;&gt;CLRS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Almost&lt;/em&gt; verbatim. While the pseudocode doesn’t include any type declarations, my Java code does. Specifically, I chose to work with a &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html&quot;&gt;LinkedList&lt;/a&gt;, since a data structure that allows for &lt;a href=&quot;http://en.wikipedia.org/wiki/Linked_list#Advantages&quot;&gt;easy &lt;em&gt;insertion&lt;/em&gt; and deletion of elements&lt;/a&gt; felt like a natural fit for an algorithm named &lt;em&gt;insertion&lt;/em&gt; sort. The code ended up looking like this: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mySort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now imagine my dismay when I read &lt;a href=&quot;http://steve-yegge.blogspot.com.es/2008/03/get-that-job-at-google.html&quot;&gt;this post&lt;/a&gt; about how to succeed in an interview at Google. Specifically, note his comment about my chosen data structure: “For God’s sake, don’t try sorting a linked list during the interview”.&lt;/p&gt;

&lt;p&gt;Don’t try sorting a linked list during the interview? I just tried sorting a linked list &lt;em&gt;on the internet&lt;/em&gt;. My tests said that the algorithm worked, too; what was I doing wrong?&lt;/p&gt;

&lt;p&gt;Upon deeper investigation, I found some &lt;a href=&quot;https://kjellkod.wordpress.com/2012/02/25/why-you-should-never-ever-ever-use-linked-list-in-your-code-again/&quot;&gt;virulent criticism of the linked list&lt;/a&gt;, and decided it was time to revisit my implementation of insertion sort, taking note of a few things:&lt;/p&gt;

&lt;p&gt;– Retrieving elements from a linked list by index, it turns out, is computationally expensive. Specifically, the &lt;code&gt;.get()&lt;/code&gt; operation I use to access values &lt;a href=&quot;http://java-performance.info/linkedlist-performance/&quot;&gt;is an O(n) operation&lt;/a&gt;; since a LinkedList is a &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/AbstractSequentialList.html&quot;&gt;sequential access list&lt;/a&gt;, accessing elements by index &lt;a href=&quot;http://www.cs.rpi.edu/~musser/gp/List/lists1.html&quot;&gt;takes linear time&lt;/a&gt; (i.e. you have to traverse all prior elements in the list until the desired index is reached). &lt;/p&gt;

&lt;p&gt;By contrast, &lt;code&gt;.get()&lt;/code&gt; &lt;a href=&quot;http://beginnersbook.com/2013/12/difference-between-arraylist-and-linkedlist-in-java/&quot;&gt;is an O(1) operation&lt;/a&gt; for an &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html&quot;&gt;ArrayList&lt;/a&gt;; elements can be accessed by index &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/collections/implementations/list.html&quot;&gt;in constant time&lt;/a&gt; since this data structure is a &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/RandomAccess.html&quot;&gt;random access list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;– My algorithm doesn’t actually require &lt;em&gt;inserting&lt;/em&gt; and &lt;em&gt;deleting&lt;/em&gt; elements. Though the name “insertion sort” might suggest otherwise, what’s really happening is that values are being &lt;em&gt;swapped&lt;/em&gt; (replaced, rather than inserted and deleted). &lt;a href=&quot;http://www.programcreek.com/2013/03/arraylist-vs-linkedlist-vs-vector/&quot;&gt;An ArrayList excels with &lt;code&gt;.get()&lt;/code&gt; and &lt;code&gt;.set()&lt;/code&gt; methods, while a LinkedList excels with &lt;code&gt;.add()&lt;/code&gt; and &lt;code&gt;.remove()&lt;/code&gt;&lt;/a&gt; — and I’m only using the former pair!&lt;/p&gt;

&lt;p&gt;So in the interest of performance, I decided it might be better to use an ArrayList. That’s a quick fix: just change the method return and parameter types from &lt;code&gt;LinkedList&amp;lt;Integer&amp;gt;&lt;/code&gt; to &lt;code&gt;ArrayList&amp;lt;Integer&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But, upon reflection, even this data structure felt unnecessary. I don’t need to dynamically modify the size of the input, so I can just work with a simple &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html&quot;&gt;array&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That code now looks like this: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mySort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;… and it works just fine. &lt;/p&gt;

</description>
        <pubDate>Mon, 26 Jan 2015 00:00:00 -0600</pubDate>
        <link>http://rmulhol.github.io//java/2015/01/26/linked-list-sorting.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//java/2015/01/26/linked-list-sorting.html</guid>
        
        <category>algorithms</category>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>Debugging With RASP: Check Your Work!</title>
        <description>&lt;p&gt;Recently, I encountered a stubborn error message. &lt;/p&gt;

&lt;p&gt;I’ve been working through &lt;a href=&quot;http://www.amazon.com/Agile-Development-Rails-Facets-Ruby/dp/1937785564&quot;&gt;Agile Web Development With Rails&lt;/a&gt;, and I got to the point where I’m instructed to verify that the order information gathered by my depot application is being written to the database (chapter 12 - Task G: Check Out!). Simple enough, I thought, I’ll just enter &lt;code&gt;sqlite3 -line db.development.sqlite3&lt;/code&gt; and run &lt;code&gt;select * from orders;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To my dismay, my simple command was met with a daunting error message: &lt;code&gt;Error: no such table: orders&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;How could this be? Had I failed to run &lt;code&gt;rake db:migrate&lt;/code&gt; at some point? No, that wasn’t it; I ran &lt;code&gt;rake db:rollback&lt;/code&gt; and &lt;code&gt;rake db:migrate&lt;/code&gt; several times just to be sure of that. Did my &lt;code&gt;database.yml&lt;/code&gt; file contain errors? No, not that I could see; everything looked fine. &lt;/p&gt;

&lt;p&gt;Unsure of where to locate my bug, I decided it was time to go through the trusty RASP progression.&lt;/p&gt;

&lt;p&gt;For those who are unfamiliar, RASP instructs you to:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;R&lt;/strong&gt;ead the error message&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;sk a colleague an informed question&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;S&lt;/strong&gt;earch using google, stackoverflow, and so forth&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P&lt;/strong&gt;ost on stackoverflow, online forums, and so forth&lt;/p&gt;

&lt;p&gt;I had read the error message. The table &lt;code&gt;orders&lt;/code&gt; was clearly not being found in the database under inspection. But why?&lt;/p&gt;

&lt;p&gt;I asked a colleague about the error, but they too were befuddled after a quick review of my &lt;code&gt;db/migrate&lt;/code&gt; folder and the &lt;code&gt;database.yml&lt;/code&gt; file. &lt;/p&gt;

&lt;p&gt;It was time to begin pursuing an answer online. Google had helped me to correct several errors in the past, so there was no reason this should be any different. If I played around with a few search term combinations, I figured, an answer would reveal itself.&lt;/p&gt;

&lt;p&gt;But that was not to be so. Google yielded surprisingly few results for every set of search terms I could come up with. There were several stackoverflow posts about &lt;code&gt;no such table&lt;/code&gt; errors, but none that resembled my problem.&lt;/p&gt;

&lt;p&gt;I was very close to posting online, but I had some hesitation. If this problem was common enough that others had encountered it and knew how to solve it, shouldn’t there be posts about the issue already? I decided to take one final peak under the hood.&lt;/p&gt;

&lt;p&gt;Upon closer inspection, I noticed that my app root directory now contained an empty &lt;code&gt;db.development.sqlite3&lt;/code&gt; file. Where did that come from? I thought my development database was stored as &lt;code&gt;development.sqlite3&lt;/code&gt; in my &lt;code&gt;db&lt;/code&gt; folder (indeed, it was).&lt;/p&gt;

&lt;p&gt;The source of my problem, it turns out, was a typo. Instead of typing &lt;code&gt;sqlite3 -line db.development.sqlite3&lt;/code&gt;, I needed to be typing &lt;code&gt;sqlite3 -line db/development.sqlite3&lt;/code&gt; (note the forward slash, rather than the dot, following db). When I corrected the typo and tried again, everything worked fine.&lt;/p&gt;

&lt;p&gt;So, I propose an addition to the RASP cycle: &lt;strong&gt;C&lt;/strong&gt;heck your work. We can call it CRASP.&lt;/p&gt;

&lt;p&gt;Sure, most people already check their work before searching online. Sometimes an error message will point you right at the typo so that you can fix it without further effort. Sometimes you’ll realize your own error upon a second glance at what you’ve written.&lt;/p&gt;

&lt;p&gt;But other times, you’ll miss the typo. You’ll make it deeper into the RASP cycle before going back to locate what should have been a quick fix. &lt;/p&gt;

&lt;p&gt;In those instances when you find yourself deep into the google with no solutions in sight, go back and check your work one more time. What I’ve found is that as the solution to your problem begins to seem more and more elusive, it becomes more and more likely that it’s closer than you think. If you can’t find information about your error online, it’s almost certainly a simple error you’ve made. &lt;/p&gt;

&lt;p&gt;So, join me in adding an addendum to the RASP process. Check your work before you go search online, and then check it again with closer scrutiny if you can’t find an answer. Embrace CRASP.&lt;/p&gt;

</description>
        <pubDate>Fri, 16 Jan 2015 00:00:00 -0600</pubDate>
        <link>http://rmulhol.github.io//ruby/2015/01/16/debugging-with-rasp.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//ruby/2015/01/16/debugging-with-rasp.html</guid>
        
        <category>rails</category>
        
        <category>rasp</category>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>Learning Data Structures and Algorithms: Implementing Insertion Sort in Java</title>
        <description>&lt;p&gt;One of the things that I’ve been working on lately is getting more familiar with data structures and algorithms. I’ve had a lot of fun working with different programming languages, styles, and frameworks, but I’ve been itching to develop some of the more foundational knowledge that I would have gotten had I pursued a CS degree in college.&lt;/p&gt;

&lt;p&gt;As a jumping off point, I picked up &lt;a href=&quot;http://en.wikipedia.org/wiki/Introduction_to_Algorithms&quot;&gt;Introduction to Algorithms&lt;/a&gt; by Cormen, Leiserson, Rivest, and Stein (CLRS). I’m sure that there are lots of other good places that one could start with to learn about these materials, but this book came &lt;a href=&quot;http://www.forbes.com/sites/quora/2013/07/03/how-do-i-strengthen-my-knowledge-of-data-structures-and-algorithms/&quot;&gt;highly recommended&lt;/a&gt; and I figured it was more important to get started than to find a perfect starting point.&lt;/p&gt;

&lt;p&gt;I’m only a couple chapters in, and I can already see why this book would be considered required reading for someone pursuing a career in software development. The materials are simple enough for the average reader to grasp upon a close read, but challenging enough to keep your interest and stretch your brain.&lt;/p&gt;

&lt;p&gt;One of the first algorithms covered in the book is &lt;a href=&quot;http://en.wikipedia.org/wiki/Insertion_sort&quot;&gt;insertion sort&lt;/a&gt;. A sorting algorithm, insertion sort sequentially examines each element in a list and moves the element it’s looking at into the proper placement among all those that came before. They give the example of a hand of cards: if I’m sorting five cards, I might work through them left to right and move lower cards to the left until the lowest is all the way to the left and the highest is all the way to the right. &lt;/p&gt;

&lt;p&gt;Grokking the algorithm is simple enough; their example makes things really clear. But actually implementing it can be a different matter. Though it’s certainly not (even close to) the most challenging algorithm, you have to know a bit about lists, loops, and iterators, and you have to be able to translate their pseudocode. That’s the subject of this post.&lt;/p&gt;

&lt;p&gt;Their pseudocode for the insertion sort algorithm is as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Alright, simple enough. As the algorithm describes, we’re going through the list, starting with second element, moving it to first if the second is less than the first, and then continuing to shift later elements closer to the beginning until we have a sorted list. Now what if I wanted to implement this pseudocode in Java?&lt;/p&gt;

&lt;p&gt;The first thing to note is that there are no type declarations. We’ll presumably be using this algorithm to sort a list of integers, so we’ll have to note that as we declare variables while translating the pseudocode. Sorting elements of some other type would require some significant changes.&lt;/p&gt;

&lt;p&gt;Second, they’re indexing the second element of the list at index 2 and the first element at index 1. But the indexes for a LinkedList (which I’ll be using) in Java start at 0. This has two consequences: (1) we’ll want to initialize our &lt;code&gt;for&lt;/code&gt; loop at 1 rather than 2, and (2) we’ll want to proceed as long as the index is &lt;em&gt;less than&lt;/em&gt; the length of the list (rather than less than &lt;em&gt;or equal to&lt;/em&gt; the length, which would take us out of bounds).&lt;/p&gt;

&lt;p&gt;Put things together, and an implementation of insertion sort in Java could look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;insertionSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, much more to learn and many more algorithms with which to get familiar, but that work can now proceed with a proper understanding and way of translating the pseudocode in place.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[&lt;em&gt;UPDATE&lt;/em&gt;: See &lt;a href=&quot;/java/2015/01/26/linked-list-sorting.html&quot;&gt;my newer post&lt;/a&gt; on changing the return and parameter types of the code above to improve the algorithm’s efficiency with large data sets]&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 14 Jan 2015 00:00:00 -0600</pubDate>
        <link>http://rmulhol.github.io//java/2015/01/14/java-insertion-sort.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//java/2015/01/14/java-insertion-sort.html</guid>
        
        <category>algorithms</category>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>My Foray into Functional Programming: Getting Started with Erlang</title>
        <description>&lt;p&gt;One of the things that I’ve been working on lately is wrapping my head around &lt;a href=&quot;http://en.wikipedia.org/wiki/Functional_programming&quot;&gt;functional programming&lt;/a&gt;. Having completed most of my projects so far in Ruby and Java (languages that support the &lt;a href=&quot;http://en.wikipedia.org/wiki/Object-oriented_programming&quot;&gt;object-oriented programming paradigm&lt;/a&gt;), beginning to work with a language that encourages the functional programming style felt like a logical next step. Enter Erlang.&lt;/p&gt;

&lt;p&gt;Erlang is technically an “impure” functional programming language; its methods can have side effects. However, working in Erlang has  introduced me to many of the features that separate functional programming from its object oriented companion. No longer can I reassign variables or tackle problems with my trusty &lt;code&gt;for&lt;/code&gt; loop. Nay, new approaches must now be uncovered.&lt;/p&gt;

&lt;p&gt;So, now that I’ve begun to wrap my head around some of the ways that common problems can be approached using the functional programming style, I wanted to share some of the obstacles I’ve come across along the way as well as how they were overcome. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Referential Transparency, or: How I Learned to Stop Worrying and Love Single Assignment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of the main things that separates functional from object-oriented programming is immutable data. Once a variable has been assigned a value, that’s it - you can’t change it later.&lt;/p&gt;

&lt;p&gt;This property is rooted in the concept of &lt;a href=&quot;http://en.wikipedia.org/wiki/Referential_transparency_(computer_science)&quot;&gt;referential transparency&lt;/a&gt;; the idea is that when you pass the same argument to the same function, you should always get the same result. Or, &lt;a href=&quot;http://blog.8thlight.com/uncle-bob/2012/12/22/FPBE1-Whats-it-all-about.html&quot;&gt;to quote Uncle Bob&lt;/a&gt;, “it means that you can replace any function call with the value it returns.”&lt;/p&gt;

&lt;p&gt;Variable re-assignment runs counter to refential transparency since the value that a variable references can change. If your function were to rely on a mutable variable, then you could pass in the same argument to the same function and get different return values on each call depending on the current value of that variable.&lt;/p&gt;

&lt;p&gt;Referential transparency sounds nice in theory. It certainly helps align my thinking about programming with the way I thought about functions in math class (high school algebra would have been &lt;em&gt;a lot&lt;/em&gt; more difficult if the same variable in an expression could have had multiple values), but it also introduces a new set of challenges.&lt;/p&gt;

&lt;p&gt;Coming from the world of object-oriented programming, I had grown so used to passing around important values in instance variables and using all sort of loops and iterators to analyze data that operating without variable re-assignment was nigh unthinkable.&lt;/p&gt;

&lt;p&gt;Still, functional programming has been around long enough - and used to do enough - that I knew there had to be an answer, so I kept plugging away. And, as is wholly predictable, it is indeed possible to solve the same problems I had conquered with object-oriented programming, you just have to take a different path to get there.   &lt;/p&gt;

&lt;p&gt;The classic example I’ve run across so far is generating sums. In Java, I could do that like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sumNumbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since we can’t use a &lt;code&gt;for&lt;/code&gt; loop that re-assigns &lt;code&gt;i&lt;/code&gt; on each iteration, functional programming languages require us to find a different approach. In Erlang, that’s pretty simple: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;lists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;lists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Well, that’s elegant. I’ve tackled the same problem without immutable data, and it actually made my code shorter.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;So, what’s going on here? Well, my sum function takes an argument, converts that argument into a list of all of the integers from 1 to that argument, and then provides a sum of all of the values in the list. It achieves the same result as my &lt;code&gt;for&lt;/code&gt; loop without iteration or variable reassignment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recursion: Did You Mean Recursion?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While the above solution makes use of Erlang’s built in functions (BIFs) to create and sum the elements of a list, another popular technique for solving this sort of problem in functional programming is to make use of &lt;a href=&quot;http://en.wikipedia.org/wiki/Recursion_%28computer_science%29&quot;&gt;recursion&lt;/a&gt;. In a nutshell, recursion refers to a function that calls itself repeatedly until a base case is reached, at which point a value is returned.&lt;/p&gt;

&lt;p&gt;Recursion isn’t unique to functional programming - I had already used it to make my minimax algorithm for the tic tac toe game I wrote in Java. And yet, recursion makes life a whole lot easier when trying to solve problems in functional programming that would typically, in object-oriented programming, make use of loops and iterators.&lt;/p&gt;

&lt;p&gt;For example, a recursive function written in Erlang to find the sum of all integers up to a given value might look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;Num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, we make use of &lt;a href=&quot;http://learnyousomeerlang.com/syntax-in-functions&quot;&gt;pattern matching&lt;/a&gt; to declare a function with two clauses. The first clause says, “when the argument passed in is 0, return 0”. The second function clause says, “for any other value, return the sum of the argument with a recursive call to sum where the argument is decremented by 1.”&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;/p&gt;

&lt;p&gt;With this function declaration, a call to sum(3) would play out like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The solution works, but, as you can see, it can also take up a lot of memory. Since each recursive call adds a new stack frame to the call stack, there’s a risk that, when generating the sum for a very large number, your stack could get too deep.&lt;/p&gt;

&lt;p&gt;One way to address this problem is to use &lt;a href=&quot;http://en.wikipedia.org/wiki/Tail_call&quot;&gt;tail recursion&lt;/a&gt;.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; With tail recursion, you eliminate the need for adding a new stack frame for every call by storing the value up to that point as an argument. For example, we could generate a sum with this function:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, we use pattern matching for a few purposes. If we receive one argument, we call sum with two arguments: the original argument passed in and 0 (which will serve as our accumulator). On subsequent calls, we decrement &lt;code&gt;Num&lt;/code&gt; by one and add the value of &lt;code&gt;Num&lt;/code&gt; to our accumulator (&lt;code&gt;Acc&lt;/code&gt;). Calling sum(3) with this function would play out like this: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since each call can stand on its own and does not require us to maintain the previous return values up to that point, this solution achieves the same end without creating the same risks to our memory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion: Just Getting Started&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Getting used to immutable data, referential transparency, recursion, and tail-call optimization has made working with Erlang a whole lot easier. I’m no longer at a loss for how to approach problems where I used to reach for variable reassignment, loops, and iterators. But there’s clearly a lot left to learn, and I’m excited to dig deeper. I look forward to posting updates here as I progress with learning the tricks of functional programming.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;This is where some functional programming advocates begin to declare the elegance of functional programming over object-oriented programming. While I’m sure there’s some truth to that in the aggregate, I still appreciate that Ruby comes pretty close: &lt;code&gt;(1..num).to_a.reduce(:+)&lt;/code&gt;. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;This function will not play nicely with negative numbers, though that could be handled with further pattern matching (e.g. &lt;code&gt;sum(Num) when Num &amp;lt; 0 -&amp;gt; io:format(&quot;Can&#39;t sum negative values!~n&quot;, []);&lt;/code&gt;). &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;It should be noted that tail recursion &lt;a href=&quot;http://www.erlang.org/doc/efficiency_guide/myths.html#id59389&quot;&gt;does not necessarily yield better performance&lt;/a&gt; than body recursion, due to optimizations in the Erlang compiler. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 30 Dec 2014 00:00:00 -0600</pubDate>
        <link>http://rmulhol.github.io//erlang/2014/12/30/foray-into-functional-erlang.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//erlang/2014/12/30/foray-into-functional-erlang.html</guid>
        
        <category>functional</category>
        
        
        <category>erlang</category>
        
      </item>
    
      <item>
        <title>To Infinity and Beyond: Working through Conway&#39;s Game of Life at Global Day of Coderetreat 2014</title>
        <description>&lt;p&gt;This past Saturday, I had the opportunity to participate in the &lt;a href=&quot;http://globalday.coderetreat.org/&quot;&gt;Global Day of Coderetreat&lt;/a&gt;. It was the first time I had ever participated in a code retreat, and I had a lot of fun working with new people, operating under a diverse set of constraints, and iteratively re-approaching the same problem from different angles.&lt;/p&gt;

&lt;p&gt;For this event, our challenge was to code &lt;a href=&quot;http://en.wikipedia.org/wiki/Conway&#39;s_Game_of_Life&quot;&gt;Conway’s Game of Life&lt;/a&gt;. I had never worked on this game before, and I found it to be a perfect fit for the event: a larger problem might have been unmanageable and frustrating, but a smaller one could have been too simple and uninteresting.&lt;/p&gt;

&lt;p&gt;What made things really fun was the changing set of constraints. We would spend 45 minutes working with one person to write a version within a particular set of limitations (don’t use conditionals, don’t write methods with more than 3 lines of code, try out &lt;a href=&quot;http://coderetreat.org/facilitating/activities/tdd-as-if-you-meant-it&quot;&gt;TDD as if you meant it&lt;/a&gt;, etc.), then toss out the code, change pairs, and take another shot with a different set of constraints.&lt;/p&gt;

&lt;p&gt;Deleting the code after each session was oddly liberating. I would have expected it to be really frustrating (“I already tackled this task, I want to move onto the next one!”), but in reality, hitting the reset button and starting from the ground up with the accumulated knowledge of what worked and what didn’t yielded better code on each iteration.&lt;/p&gt;

&lt;p&gt;I also appreciated getting a sense for how to work within an infinite two-dimensional field. In the past, when I’ve worked with a grid structured similarly to the one in this game, I’ve made calculations for determining neighboring cells based on the length of the rows and columns. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# grid of finite width and height:&lt;/span&gt;

 &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---|---|---&lt;/span&gt;
 &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---|---|---&lt;/span&gt;
 &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This setup is sufficient for me to determine lines. I know that the rows will be sequential sets that begin from the base index and extend as long as the side length ([0, 1, 2], [3, 4, 5], [6, 7, 8]), columns will be cumulative lists that begin at each of the indexes in the first row and add the length of the side ([0, 3, 6], [1, 4, 7], [2, 5, 8]), and diagonals will be cumulative lists that begin at either the first or last index in the first row and then add the length of the side plus 1 or the length of the side minus 1, respectively ([0, 4, 8], [2, 4, 6]).&lt;/p&gt;

&lt;p&gt;With the Conway’s Game of Life, however, using such calculations to assess the neighbors would be to impose finitude on an infinite field. How can we calculate the neighbors for a cell if each row and column stretches out infinitely?&lt;/p&gt;

&lt;p&gt;The answer, I learned, is to work with a &lt;a href=&quot;http://en.wikipedia.org/wiki/Cartesian_coordinate_system&quot;&gt;Cartesian coordinate system&lt;/a&gt;. If we replace some base cell (say, index 4 in the example above) with (0, 0) and work outward from there, we can learn the index of all neighbors simply by toggling the x and y values by one. You can do that pretty easily:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_neighboring_cells&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;increments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeated_permutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;increments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neighbor_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbor_col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;neighbor_row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;neighbor_col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neighbor_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbor_col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, we get all repeated permutations of [-1, 0, 1] of length 2 ([[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 0], [0, 1], [1, -1], [1, 0], [1, 1]]), remove [0, 0] (which maps to the index of the cell for which we’re gathering neighbors), and then map those values onto the cell we’ve passed in. The result is an array containing the coordinates for all 8 neighbors:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_neighboring_cells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Working with coordinates like this isn’t all that tricky, but it’s something you might not think of if you’re continually approaching similar problems in similar ways. As Thanksgiving nears, I’m thankful that I had the opportunity to practice tackling a different problem in different ways at Global Day of Coderetreat 2014.&lt;/p&gt;

</description>
        <pubDate>Mon, 17 Nov 2014 00:00:00 -0600</pubDate>
        <link>http://rmulhol.github.io//general/2014/11/17/coderetreat-infinite-plane.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//general/2014/11/17/coderetreat-infinite-plane.html</guid>
        
        <category>coderetreat</category>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Program Like a Debater: Interacting with Clients</title>
        <description>&lt;p&gt;Before I took up programming, I was a debate coach. Before that, I was a college debater. And before that, I was a debater in high school. I’ve been involved with &lt;a href=&quot;http://en.wikipedia.org/wiki/Policy_debate&quot;&gt;policy debate&lt;/a&gt; for most of my life (literally: 14/27 years) and, until recently, it’s the main activity by which I’ve defined my work and identity.&lt;/p&gt;

&lt;p&gt;So when a colleague of mine asked if my background in debate informs the way I approach programming, the answer was obviously yes. It was just tough to explain exactly how. When you work in a field for over a decade, you pick up skills and habits that impact how you learn and interact, but that process is largely subconscious. You don’t think, you just do.&lt;/p&gt;

&lt;p&gt;Still, I do have some experience articulating what I do. Being a debate coach means identifying what helped you succeed and then transmitting that knowledge to your students. Being a &lt;em&gt;good&lt;/em&gt; debate coach means identifying what helps you to help others and then re-affirming that to yourself. The knowledge isn’t hidden away, it just requires a little reflection.&lt;/p&gt;

&lt;p&gt;So, after fielding the inquiry, I’ve decided it’s time for a little reflection.&lt;/p&gt;

&lt;p&gt;To start, I’ll address how my experience with debate informs how I approach interactions with clients. Conversations with a client aren’t adversarial in the same way as the exchanges you’d find in a debate, but getting the most out of the exchange often requires you to think like a debater.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Listen&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of the things most difficult to communicate to new debaters is that they need to take the time to listen to their opponents. It seems obvious; how can you respond if you don’t have a good idea of what you’re responding to? Still, young debaters are more comfortable waxing poetic about the topics they’ve mastered than they are with engaging their opponents. They think – if I can convince the judge I’m an expert on my materials, the rest will work itself out.&lt;/p&gt;

&lt;p&gt;This makes for some pretty awful debates. In debater parlance, we say that they lack “clash.” The two sides have convinced me they’re each experts on some subset of the topic, but it’s difficult to choose one over the other when there is no central point of contention.&lt;/p&gt;

&lt;p&gt;I can tell a debater has grown when their ability to listen offsets the time they need to prepare. As their listening ability goes up, they’re able to quickly understand and evaluate new materials, identifying weaknesses and generating counter-arguments with ease.&lt;/p&gt;

&lt;p&gt;The world of programming is a different animal; you’re not trying to expound upon the faults of your clients. But listening is every bit as important. While you might be tempted to show off all that you can do, you can usually optimize your output by taking the time to understand what your client is saying and addressing their real needs.&lt;/p&gt;

&lt;p&gt;In my conversations with clients, I’ve taken care to soak up every bit of feedback I can extract. While it’s tempting to prove that I’ve addressed previous feedback and demonstrate all that I’ve learned, it’s often more helpful to focus on what I can do better going forward. It’s humbling, but also rewarding. Listening is the key to a productive exchange, be it debate or dialogue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Narrow Down Disagreements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once young debaters begin to grasp the concept of clash, they have a tendency to take it too far. You say economic collapse would be bad? I say &lt;a href=&quot;http://sdiencyclopedia.wikispaces.com/Dedevelopment+(Dedev)&quot;&gt;economic collapse would be good&lt;/a&gt;! You say renewable energy is necessary to ensure the survival of the human race? I say – forget renewable energy, &lt;a href=&quot;http://sdiencyclopedia.wikispaces.com/Wipeout&quot;&gt;the human race should be wiped out&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Young debaters latch onto arguments like these because it lets them fall back into the pattern of not listening without missing out on clash. I don’t have to pay very close attention to what you’re saying if I’m just going to say everything that you think is bad is actually good. But more mature debaters begin to abandon these arguments.&lt;/p&gt;

&lt;p&gt;The optimal strategy for winning a debate is not to counter every single point leveraged by your opponent, since it’s unlikely that everything they’ve said is wrong.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Instead, it’s best to narrow down the “nexus question” - the central point of contention - as much as possible, and then assure beyond a doubt that you’re on the right side of it.&lt;/p&gt;

&lt;p&gt;In conversations with a client, this means doing everything you can to get on the same page, aligning expectations with deliverables as much as possible, and then picking your spots for disagreement. It can be tempting to get defensive and respond to every single piece of feedback reactively, but often taking a step back and looking at the big picture can help you avoid missing the forest for the trees. Find and address the places where there are genuine disagreements, but don’t get bogged down dealing with largely irrelevant sidebars.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Prepare Meticulously&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Participants in policy debate are well known for their preparation. Before &lt;a href=&quot;http://www.nytimes.com/2010/04/18/education/edlife/18debate-t.html?pagewanted=all&amp;amp;_r=0&quot;&gt;the transition to paperless debate&lt;/a&gt;, it was common to see teams carrying around five or six rubbermaid tubs filled with evidence. Debaters prepare to answer every possible argument.&lt;/p&gt;

&lt;p&gt;I said above that the ability to listen offsets a debater’s need to prepare, but the mark of a truly great debater is when they remain committed to preparation while possessing a strong listening ability. Extensive preparation lets you spend more time listening for nuance, since your stock response to the general contours of an opponent’s argument is already at hand.&lt;/p&gt;

&lt;p&gt;Even (perhaps especially) when you’re not dealing with an adversary, preparing for a conversation yields better outcomes. If you know about your client’s objectives and resources, you will be better suited to accommodate their needs. You will enter the conversation ready to get on the same page and get up to speed more quickly.&lt;/p&gt;

&lt;p&gt;Lots of people understand the need to prepare, and of course they do prepare. But participating in debate has taught me the difference between preparing and &lt;em&gt;being prepared&lt;/em&gt;. Glancing at a few documents or running through a practice speech is preparation, but it doesn’t guarantee that you will be prepared. Being prepared means committing the resources at hand to memory and making them second nature.&lt;/p&gt;

&lt;p&gt;You’re not prepared just because you have six rubbermaid tubs filled with documents. You’re prepared when you’re familiar enough with every one of those documents that you know how and when to use each one of them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion: More to Come&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Participating in debate taught me the values of listening well, narrowing disagreements, and preparing meticulously, but it also taught me so much more. While I think that these are the skills most pertinent to interacting with a client, I look forward to expounding further upon what it means to program like a debater in future posts. Stay tuned!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;As put by Winston Churchill, “The greatest lesson in life is to know that even fools are right sometimes.” &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 12 Nov 2014 00:00:00 -0600</pubDate>
        <link>http://rmulhol.github.io//general/2014/11/12/debate-client-interact.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//general/2014/11/12/debate-client-interact.html</guid>
        
        <category>communication</category>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>In the Interest of Transparency: Make Sure Your Meaningful Names Keep Up With Your Code</title>
        <description>&lt;p&gt;In chapter 2 of &lt;a href=&quot;http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&quot;&gt;Clean Code&lt;/a&gt;, Uncle Bob Martin suggests that an important technique for writing quality code is using meaningful names. His rationale is sound. While it might seem like cryptic labels make code more elegant and thus easier to take in, it’s likely that those benefits come at the cost of comprehensibility - as the code grows, it becomes increasingly difficult to understand how all of the various abbreviated identifiers fit together.&lt;/p&gt;

&lt;p&gt;To make my own code more clean, I’ve been using meaningful names as I construct my tic tac toe game. My &lt;code&gt;getMove()&lt;/code&gt; method, for example, has three parameters: the current state of the board, the move identifier for opponent, and the move identifier for the current player. Instead of writing the method as &lt;code&gt;getMove(x, y, z)&lt;/code&gt;, it makes sense to label those parameters like so: &lt;code&gt;getMove(board, opponentMove, myMove)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Using these names for my parameters allows me to carry out all sorts of evaluations to determine which move is optimal while assuring that those evaluations are unambiguous. I can see whether placing &lt;code&gt;myMove&lt;/code&gt; in one place on &lt;code&gt;board&lt;/code&gt; will cause a win (taking it if so), try to block a loss if placing ‘opponentMove&lt;code&gt; somewhere on &lt;/code&gt;board` would cause that and a win is not available, check whether placing either move could cause a fork and take or block it accordingly, etc.&lt;/p&gt;

&lt;p&gt;I proceeded through three AI players writing my method like this: a dumb player that returns random moves, a smart AI player that manually checks for wins, losses, forks, and the middle space, and an abstract AI player using the minimax algorithm to consider, evaluate, and score all possible moves. Everything worked perfectly.&lt;/p&gt;

&lt;p&gt;However, I later added a configuration option. Instead of having the game run in default mode (3x3 board, human vs computer, ‘X’ v ‘O’), I would now allow the user to construct custom versions of the game (variable board sizes, player identities, and move signatures). Things were still working well, with one caveat: the minimax AI player was not functioning properly when it was player 1.&lt;/p&gt;

&lt;p&gt;This problem had me very confused. I spent a number of hours tinkering with my AI player trying to figure out where I had introduced some subtle error into my minimax algorith.&lt;/p&gt;

&lt;p&gt;Unfortunately, the error lied elswhere. It turned out that my Runner class, when it was making the call to &lt;code&gt;getMove()&lt;/code&gt;, sent the arguments &lt;code&gt;board, player1Move, player2Move&lt;/code&gt;. Here, I had used meaningful names for my arguments, but they expected to be operating within the game’s default configuration. Once I added the option to customize the game, &lt;code&gt;getMove()&lt;/code&gt; was failing to provide correct moves when the AI player was player 1 because it was always receiving &lt;code&gt;player2Move&lt;/code&gt; as &lt;code&gt;myMove&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This error is entirely my own, rather than a fault with the practice of using meaningful names. Indeed, the third point in Uncle Bob’s chapter on meaninful names is to avoid disinformation. What I learned, however, is that you must be dilligent with the meaningful names you choose so that the code you write actually expresses your intentions. Over-specifying right now might seem like it makes your names even more meaningful, but it comes at the cost of requiring abstraction when you abstract related features in other parts of your program.&lt;/p&gt;

</description>
        <pubDate>Sat, 01 Nov 2014 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io//general/2014/11/01/transparent-meaningful-names.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//general/2014/11/01/transparent-meaningful-names.html</guid>
        
        <category>variables</category>
        
        <category>methods</category>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Figuring Out Code: A Comment on Comments</title>
        <description>&lt;p&gt;When you begin learning a programming language, one of the first things you come across is how to create comments - blocks of text that explain what surrounding code does but are not processed when the program runs. &lt;/p&gt;

&lt;p&gt;People teaching you want you to know about comments so that they can provide you with examples of working code that are self-explanatory, and you want to know about comments for a variety of reasons: they help &lt;em&gt;you&lt;/em&gt; write self-explanatory code, they let you run different variations of the same program without having to completely delete text you want to remove temporarily, they allow you to pair pseudo-code with real code, and so forth. &lt;/p&gt;

&lt;p&gt;One of the things I’ve learned, however, is that comments are frowned upon by some in the coding community. A mentor of mine, for example, once told me that “comments are where understanding goes to die.” Another colleage published &lt;a href=&quot;http://blog.8thlight.com/dariusz-pasciak/2014/08/13/an-appeal-to-cs-teachers.html&quot;&gt;a plea to CS teachers&lt;/a&gt; begging instructors to abandon draconian requirements that students write comments for every line of code. Clearly, not all programmers are on board with the idea that comments ought to be your go-to tool for writing readable code.&lt;/p&gt;

&lt;p&gt;Where does this sentiment come from? What’s wrong with comments intended to help you understand code?&lt;/p&gt;

&lt;p&gt;Well, the answer is twofold:&lt;/p&gt;

&lt;p&gt;(1) Comments often don’t get updated as regularly as the source code they explain, so they can begin to actually work against understanding. If a comment says that a block of code does one thing when it’s been upgraded to do something different, that comment can leave you scratching your head wondering how the code that says it does one thing can look like it does something very different (hint: &lt;em&gt;it does&lt;/em&gt;). (Note: You could obviously be dilligent about updating your comments each time you update your code, but this is a sizable burden that many  do not carry throughout the life of a program. If only there were some alternative …)&lt;/p&gt;

&lt;p&gt;(2) There &lt;em&gt;is&lt;/em&gt; a superior alternative. Most of the places where you’d insert a comment, you’d be much better off naming methods and variables in ways that are more transparent. Instead of naming your “Hello, world!” method &lt;code&gt;hw()&lt;/code&gt;, you could name it &lt;code&gt;printHelloWorld()&lt;/code&gt;. When your names leave little room for ambiguity, there’s little need for explanatory comments &lt;em&gt;and&lt;/em&gt; that lack of ambiguity is more likely to stand the test of time.&lt;/p&gt;

&lt;p&gt;This seems like an open-and-shut case in favor of the parties who proclaim that we ought to use comments sparingly.&lt;/p&gt;

&lt;p&gt;And yet, I recently had an experience with comments that led me to re-evaluate their utility.&lt;/p&gt;

&lt;p&gt;The backstory is this: I’ve been working on writing a game of tic tac toe in Java, where one feature is an unbeatable AI player. To make my AI player unbeatable, I’ve been putting together a &lt;a href=&quot;http://en.wikipedia.org/wiki/Minimax&quot;&gt;minimax algorithm&lt;/a&gt; to check the board and pick the optimal move. &lt;/p&gt;

&lt;p&gt;The premise of minimax is straightforward enough - examine every possible game state resulting from any given move up to a certain depth (in this case, the end of the game), score each of the moves accordingly, and then choose the move that minimizes the maximum loss (i.e. reduces the worst case scenario).&lt;/p&gt;

&lt;p&gt;Implementing the minimax algorithm, however, is another story. There are a lot of moving pieces, and an error in one place can cascade throughout the entire program, tainting the results.&lt;/p&gt;

&lt;p&gt;Late in the afternoon today, after working on my algorithm for a day and a half, I still couldn’t get it working. The AI player would place moves in interesting patterns and even secure wins against sub-optimal play, but it wasn’t properly avoiding moves that were all but certain to result in a loss.&lt;/p&gt;

&lt;p&gt;The code I had looked right to me, and I had been tinkering with it for so long that I no longer knew what to change, so I opted to consult a mentor. But first, I thought, this could be a good time for comments. I didn’t intend comments to make it into my final program, but I at least wanted to document what I thought every line of code in my program was doing before going and asking someone else to help decipher what was going wrong.&lt;/p&gt;

&lt;p&gt;So, I set to work, meticulously commenting each line. Most things were easy to comment - I had been reading about minimax for so long, and looking at so many examples of pseudo and real code implementing the method that simply laying out and describing each step was a welcome form relief. &lt;/p&gt;

&lt;p&gt;But, wouldn’t you know it, I found a few places where I had confused myself (what was I thinking when I put in &lt;em&gt;this&lt;/em&gt; line of code?). So, I trimmed and edited, removing things I couldn’t explain and adding things I needed to make my explanations coherent. And, after it all, I chose to give the program one final try.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It worked&lt;/em&gt;. &lt;strong&gt;IT WORKED!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I was ecstatic. Comments led me to articulate what I was doing and make sure that the output matched the intentions, and that’s exactly what I needed to do to get things up and running.&lt;/p&gt;

&lt;p&gt;I promptly deleted my comments, made sure spacing and indentation all looked pretty, and then pushed my project to Github. Happy times.&lt;/p&gt;

&lt;p&gt;You may be above all of this. You may intuitively digest algorithms and output working examples without intermediaries. In that case, please kindly disregard.&lt;/p&gt;

&lt;p&gt;But, if you’re like me, and you find yourself struggling to implement something you understand conceptually and know should work, maybe give comments a try. You don’t need to keep them. You don’t need to tell others you used them. But articulating your thoughts can sometimes help you implement them, and comments helped me do that today.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[Note: I recently discovered that my personal epiphany described herein is common among programmers and has its own name: &lt;a href=&quot;http://en.wikipedia.org/wiki/Rubber_duck_debugging&quot;&gt;Rubber Duck Debugging&lt;/a&gt;]&lt;/em&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 30 Oct 2014 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io//general/2014/10/30/comment-on-comments.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//general/2014/10/30/comment-on-comments.html</guid>
        
        <category>comments</category>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Conundrums in TDD Land: Improving Elegance vs Reducing Dependencies</title>
        <description>&lt;p&gt;As I’ve been doing more work with Java, one of the things I’ve focused on is getting my Java TDD abilities up to where they are with Ruby. JUnit is a whole different beast from Rspec, and figuring out how to structure and write tests within this framework has been a new and interesting challenge.&lt;/p&gt;

&lt;p&gt;One of the things I’ve focused on lately is making sure that my tests for one object don’t depend on other objects. This isn’t by itself a departure from the form of testing I’ve done in Ruby/Rspec - you always want tests of one object to work regardless of changes to other peripheral objects - but figuring out the implementation details has sometimes served to remind me of just how new to this language I still am.&lt;/p&gt;

&lt;p&gt;For example, right now I’m working on a tic tac toe game. One component of the game is an AI player. This object is supposed to react to moves chosen by the human player so that it can choose the optimal move for itself. To do so, it looks at the current state of the board and evaluates how likely any given move is to maximize its chances of winning.&lt;/p&gt;

&lt;p&gt;This isn’t a particularly novel challenge for those who are familiar with building a tic tac toe game, but it does create a temptation to inject unwanted dependencies into my testing suite. Since my AI player needs to look at the board to figure out its next move, it seems easiest to inject an instance of the board class into my tests for the AI Player and then just work with that. &lt;/p&gt;

&lt;p&gt;Doing so, however, would result in unsatisfactory tests. The tests in my AI player could break due to unrelated changes in my board, and I wouldn’t really know whether or not there was a problem with my AI player itself. The goal should be to make the tests on the AI player rely only on the logic within that object, and then to trust that messages sent to the board will work fine as long as they are sent.&lt;/p&gt;

&lt;p&gt;To actualize this goal, I’ve learned that I generally want to be passing things like the board into my methods via parameters, rather than initializing them at the top as instance variables. When the board being evaluated is simply an argument received by a method, it’s easy to simulate various configurations of that object for all sorts of different tests. If that board were an instance of the board class that was pre-determined at the top of the tests, then I’d be relying on the sort of dependencies I’m hoping to avoid.&lt;/p&gt;

&lt;p&gt;One problem this has created for me, however, is that it prevents me from using shortcuts that I feel would make my code more elegant. Passing in arguments generally means creating methods with up to three or four parameters numerous times throughout my classes, where many of them could be set by default if I relied upon calls to instance variables. &lt;/p&gt;

&lt;p&gt;This isn’t a huge problem; I’ll take well tested code over elegant code any day. But, one of things I look forward to figuring out as I move ahead is how to have my cake and eat it too. There must be ways to write code that is well tested and elegant, and that’s one of the things I’ll be looking to learn as I continue my journey.&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Oct 2014 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io//java/2014/10/26/tdd-elegance-dependencies.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//java/2014/10/26/tdd-elegance-dependencies.html</guid>
        
        <category>TDD</category>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>Working with Packages: Compiling Classes that Implement Interfaces</title>
        <description>&lt;p&gt;To get more familiar with Java, one of the resources I’ve been working through is &lt;a href=&quot;http://www.amazon.com/Java-Complete-Reference-Ninth-Edition-ebook/dp/B00HSO0X6C&quot;&gt;&lt;em&gt;Java: The Complete Reference, Ninth Edition&lt;/em&gt;&lt;/a&gt;. It’s a bit of a long slog (the book is 1312 pages), but I’ve enjoyed getting a fairly comprehensive overview of the language while recreating the numerous example programs offered throughout.&lt;/p&gt;

&lt;p&gt;Though I use an IDE (&lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ&lt;/a&gt;) for my own projects, I’ve been completing the exercises from the book in Vim for two reasons: (1) I want to get a good understanding of what’s going on ‘behind the curtain,’ without relying on all the legwork IntelliJ does for me; and, (2) I don’t want to create new projects in IntelliJ for each of the very small programs in the book (so far I’ve completed over 200, and most are fewer than 50 lines).&lt;/p&gt;

&lt;p&gt;Recently, I was working on an example in Chapter 9, where the objective is to practice implementing interfaces. To do so, you first create an interface &lt;code&gt;Callback&lt;/code&gt;, then a class &lt;code&gt;Client&lt;/code&gt; that implements the interface, and then finally a class &lt;code&gt;TestIface&lt;/code&gt; that both declares an interface reference variable and calls the method from &lt;code&gt;Client&lt;/code&gt; on it. &lt;/p&gt;

&lt;p&gt;Working in Vim, I first placed all of these components (one interface and two classes) into a single file. It compiled and ran just fine.&lt;/p&gt;

&lt;p&gt;The next lesson adds two more classes: one, &lt;code&gt;AnotherClient&lt;/code&gt;, that implements the interface differently, and another, &lt;code&gt;TestIface2&lt;/code&gt;, that calls the method from &lt;code&gt;AnotherClient&lt;/code&gt; on an interface reference variable. So that I could minimize retyping, I opted to place each component in a separate file: one for the interface, and four for the respective classes.&lt;/p&gt;

&lt;p&gt;The file containing the interface compiled just fine, but the classes were giving me guff:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;error:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cannot&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;symbol:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Callback&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I was completely baffled. How could it be that &lt;code&gt;javac Callback.java&lt;/code&gt; would work just fine, but &lt;code&gt;javac Client.java&lt;/code&gt; would produce the error above? I could see that &lt;code&gt;Callback.class&lt;/code&gt; did indeed reside in the exact same package directory as &lt;code&gt;Client.java&lt;/code&gt;, but the compiler wasn’t finding it.&lt;/p&gt;

&lt;p&gt;I opted to try it out in IntelliJ. While I don’t want to rely on the IDE as a shortcut, I was hoping that I could learn something by seeing how it fixed the problem. But this made things even more confusing - the &lt;em&gt;exact same&lt;/em&gt; source code compiled in IntelliJ without a hitch. &lt;/p&gt;

&lt;p&gt;I fooled around for awhile (reading through examples of similar problems on &lt;a href=&quot;http://stackoverflow.com/questions/16102893/cannot-find-symbol-saying-implemented-interface-not-found&quot;&gt;stackoverflow&lt;/a&gt;, using &lt;code&gt;import&lt;/code&gt; in myriad different ways, changing the names of the interface and classes, etc) trying to find an answer before I stumbled upon something that worked:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javac&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyPack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It turns out that in order to compile a class that implements an interface and resides within a package, you have to back up out of that package and compile by providing the file directory that includes the package. &lt;/p&gt;

&lt;p&gt;Who knew?&lt;/p&gt;

</description>
        <pubDate>Wed, 15 Oct 2014 00:00:00 -0500</pubDate>
        <link>http://rmulhol.github.io//java/2014/10/15/packages-interfaces-classes.html</link>
        <guid isPermaLink="true">http://rmulhol.github.io//java/2014/10/15/packages-interfaces-classes.html</guid>
        
        <category>packages</category>
        
        <category>interfaces</category>
        
        <category>classes</category>
        
        
        <category>java</category>
        
      </item>
    
  </channel>
</rss>
